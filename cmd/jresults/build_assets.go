// Code generated by go-bindata.
// sources:
// assets/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x94\x5f\x53\xdb\x3a\x10\xc5\xdf\xf9\x14\xba\x7e\xbd\x63\xeb\x42\xc2\x05\x3a\x4a\x66\x28\xb4\x40\xa0\x85\xc6\x6d\x20\x8f\xb2\xb5\xd8\x02\xfd\xf1\x68\xd7\x49\x43\x26\xdf\xbd\xe3\x24\x8d\x69\x1b\xf2\x58\x3f\x78\x74\x74\xb4\x5e\x9f\x9f\x77\x2c\x4a\xb2\xa6\xbf\xc7\x98\x28\x41\xaa\x66\xc1\x98\xf8\x27\x8e\xd9\x8d\x24\x40\x62\xb9\xb7\x95\x36\xa0\x98\x74\x8a\x59\xed\xf4\xa3\x06\xc5\xce\xd2\x94\xc5\xf1\xfa\xb4\xd1\xee\x99\x05\x30\xbd\x08\x69\x66\x00\x4b\x00\x8a\x58\x19\xe0\xb1\x17\x95\x44\x15\xbe\xe3\xdc\xca\xef\xb9\x72\x49\xe6\x3d\x21\x05\x59\x35\x22\xf7\x96\x6f\x36\x78\x27\xe9\x24\x47\x3c\x47\x6c\xf7\x12\xab\x5d\x92\x23\x46\x4c\x3b\x82\x22\x68\x9a\xf5\x22\x2c\x65\xe7\xb8\x1b\xbf\x1f\x8d\xb5\x4e\xaf\x3e\xc2\xf5\xbe\xba\xb0\x83\xe1\xe9\xf3\x2c\xaf\x2f\x4f\x2f\x87\x45\xe7\xe0\xd6\x7e\xcb\xa7\xd3\x23\xef\x3a\xc3\xb1\x2a\xba\x23\xf9\xef\x9d\x4d\xbf\xe2\x0b\xbf\xfe\xff\x78\x92\xa9\x0f\x4f\x65\xb7\x8e\x58\x1e\x3c\xa2\x0f\xba\xd0\xae\x17\x49\xe7\xdd\xcc\xfa\x1a\xa3\xfe\x5e\xcb\xe0\xb6\x22\xed\x9d\x34\x8c\x4a\xb0\xf0\x17\x12\xc7\xcb\x46\xbb\x72\x87\xcb\x99\xff\xbc\xaf\x87\x38\x7a\x18\x75\xdd\xf9\x7f\x83\x9a\x8c\xbb\x90\x68\xce\x06\xf5\xd9\x51\x3d\x7d\x52\xf5\xfd\x49\x3a\x0a\x37\x93\xe1\xd8\xfb\xbb\xea\x20\xbb\x1f\x17\xb6\x18\x7c\xb9\x7a\x98\x1a\x9e\x56\xbb\x73\x0b\xfe\x73\x0a\x44\xe6\xd5\x6c\x1d\x97\x64\x66\x80\xe5\x46\x22\xf6\xa2\x95\x58\xde\x63\xa4\xa0\x2b\x50\x6b\x95\xf9\xa0\x20\x6c\x64\xe9\x27\x10\xd6\xeb\xdc\x3b\x05\x0e\x37\x5e\x00\xac\xbc\x43\x3d\x81\x68\xd5\xa3\xe9\xd2\x0e\xe0\x4a\x87\x56\x2c\xed\xfe\x8d\xcc\xc0\x08\x4e\xe5\xef\x46\x2a\x6d\x65\x00\xb7\x59\x9f\x40\xba\xad\x25\x24\x9d\x92\x41\xb1\x73\x98\x68\xd9\x7c\xe6\xed\xd5\x4a\x6f\xaf\x3f\x39\x64\x77\x10\x72\x70\xa4\x0d\xfc\x7a\x40\xf0\xf6\xd5\x1b\xe7\x55\x2c\x41\x2d\xd6\xe6\x9a\xcf\x59\x90\xae\x00\x96\xa4\x24\x69\x08\x58\x1b\x42\xb6\x58\x6c\xa7\x20\x48\xf5\xe7\xf3\x98\x25\x4b\x10\x6c\xb1\x10\x9c\xd4\x16\x3b\xd5\x2f\xf0\xb6\xdb\x10\xd9\x51\xbb\xe6\xb2\xc1\xb2\xeb\x41\x0d\x9c\xb7\xfd\x35\x9f\x93\xc3\x3f\x8f\xf0\xd7\xb1\xe6\x73\x06\x4e\xb1\x36\xb6\xe0\xaf\x30\x09\xbe\x1c\x99\xe5\x4c\xf2\xd5\xb6\xe0\xab\x9f\xd6\x8f\x00\x00\x00\xff\xff\x43\xd5\x3c\xc5\xbc\x04\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 1212, mode: os.FileMode(420), modTime: time.Unix(1473523459, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/main.html": assetsMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

