// Code generated by go-bindata.
// sources:
// assets/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x6d\x73\xda\x48\x12\xfe\xbe\xbf\xa2\x4f\xe7\x2d\x89\x1c\x48\xd8\xd8\x4e\x4c\xc0\x55\x39\x3b\x9b\xc4\x79\x71\x0e\xbc\xce\x7a\x53\xa9\xd4\xa0\x69\xd0\x90\xd1\x8c\x6e\x66\x04\xe6\x28\xfe\xfb\xd5\x48\x02\x49\x18\xb3\x95\xcd\xd6\xf2\xc1\xa5\xe9\xee\x79\xba\x67\xfa\xe9\x6e\xc9\xbd\xc8\xc4\xfc\xfc\x27\x80\x5e\x84\x84\xda\x07\x80\x9e\x61\x86\xe3\xf9\xd5\x7b\x34\xa8\x40\xa1\x4e\xb9\xd1\x30\x56\x32\x86\xe5\x12\xfc\xa1\x21\xca\xdc\xb0\x18\xfd\x5f\xa4\x8a\x89\x01\xe7\x8a\x08\x68\x1f\x35\xe1\xa8\xdd\x3e\x85\xc3\x93\x6e\xfb\xb8\xdb\x3e\x81\x97\xc3\x1b\x07\x56\xab\x5e\x90\xc3\xe5\xd0\xff\x68\xb5\xe0\x1d\x31\xa8\x0d\x84\x32\x4e\x18\x47\x0a\x44\x50\x88\x99\x60\x63\x86\x14\x2e\x86\x43\x68\xb5\x0a\x6b\xce\xc4\x37\x50\xc8\xfb\x8e\x36\x0b\x8e\x3a\x42\x34\x0e\x44\x0a\xc7\x7d\x27\x32\x26\xd1\xdd\x20\x88\xc9\x7d\x48\x85\x3f\x92\xd2\x68\xa3\x48\x62\x17\xa1\x8c\x83\x8d\x20\xe8\xf8\x1d\xff\x69\x10\x6a\x5d\xca\xfc\x98\x09\x3f\xd4\xda\x01\x26\x0c\x4e\x14\x33\x8b\xbe\xa3\x23\xd2\x79\x76\xdc\xfa\xf7\xed\x1d\x63\xc3\x37\xbf\xe0\xdb\x43\xfa\x2a\xbe\x1a\xbc\xf8\xb6\x08\xd3\xd7\x2f\x5e\x0f\x26\x9d\xa3\xeb\xf8\xd7\x70\x3e\x7f\x2a\x45\x67\x70\x47\x27\xc7\xb7\xe4\x5f\x1f\xe3\xe1\x8d\xfe\x5f\xf0\xf6\xf4\xd9\x6c\x44\x5f\x4e\xa3\xe3\xd4\x81\x50\x49\xad\xa5\x62\x13\x26\xfa\x0e\x11\x52\x2c\x62\x99\x6a\xa7\x72\x05\xd7\x89\x61\x52\x10\x0e\x26\xc2\x18\xff\x86\x03\xb7\x32\x47\xfb\x8e\xad\x5e\x2f\xe4\x87\x43\x36\xd0\xb7\xbf\xdd\x1e\x8b\xcb\xf6\x55\x6a\xb8\x78\x45\x34\xbf\xb8\x4a\x2f\x9e\xa6\xf3\x29\x4d\x3f\x9d\x0d\x6f\xd5\xbb\xd9\xe0\x4e\xca\x8f\xc9\xd1\xe8\xd3\xdd\x24\x9e\x5c\xfd\xe7\xcd\x6f\x73\x1e\x0c\x93\x3f\x3a\xf6\xee\xa3\x99\x45\x82\x7d\xc7\xe0\xbd\x09\xb2\xb8\xf2\xa3\x06\x81\x3d\xd4\x54\x53\xe4\x6c\xa6\x7c\x81\x26\x30\x24\x0d\x23\xa2\x8c\x0e\x78\x46\x1f\x2b\xb8\xc8\x04\x9b\x43\x65\x34\x0e\xd6\x3c\xee\x8d\x24\x5d\x40\xc8\x89\xd6\x7d\x27\x94\xc2\x10\x26\x50\xad\xa3\x89\x0e\xff\x3a\x7e\x47\x87\xeb\xba\x21\x23\x8e\x6b\x97\xf9\x22\xfb\xdb\xd2\x46\xb1\x04\x69\xb1\x1a\x49\x45\x51\x6d\x96\x91\x9c\xa1\x2a\x9e\x43\x29\x28\x0a\xbd\xd1\x29\xd4\x89\x14\x9a\xcd\xb0\x08\xdc\x7a\x29\x2b\x35\x5f\xab\x72\x91\xa9\xcf\x7b\x4c\x24\xa9\x29\xee\x36\x8c\x30\xfc\x36\x92\xf7\x0e\x30\x5a\xac\x5e\x70\xee\xc0\x8c\xf0\x74\xad\x06\x62\x25\xd9\x23\xd2\xf3\x5e\x60\xa2\x6d\xc8\x77\x64\x84\x7c\x97\x62\x48\xe2\x84\xa3\xde\xa5\x7a\x8f\x44\x80\x17\x6b\x0c\x1b\x3b\x77\x1a\xea\xc3\x25\xce\xfc\x3d\x36\xef\x91\xb2\xbd\x20\x67\x27\xf0\x11\x55\x88\xc2\x30\x8e\x7b\xec\x7e\x86\x97\x4a\x49\x05\xde\x85\x4c\x85\xd9\x32\xe9\x05\xe5\x1d\x5a\x4d\xe5\x7e\x7b\xc6\xd2\xa8\x34\x5d\x2e\x41\x11\x31\xc1\x8c\x26\x66\x50\x70\x67\xb5\x7a\x3c\x1d\x74\x5f\x3a\x2c\xdf\xb2\xab\x05\x58\xad\x36\x39\x29\xa5\x56\x58\xf0\x89\x5b\x81\xae\x65\x89\x6e\x7b\x5a\x2e\x5b\xe5\xce\x1d\x06\x1b\x6e\xe2\xbd\x69\x29\x36\x89\x8c\x93\xef\x29\xb2\xf8\x7d\xbb\x12\xc5\x84\x19\x83\xf3\xf3\xa9\xdf\x19\x3b\xe0\x67\xf9\xfe\x21\x84\xa1\x21\x82\x12\x45\x2f\x71\xc6\x88\xed\x90\xdf\x79\x8c\x82\x2e\xdf\xb7\xa9\xe0\xcf\xd9\xc9\x9f\x8e\xfd\xd0\xc6\x9e\xf1\xab\xc0\x82\xd5\x0a\x3c\x9b\xc5\x4c\x68\xaf\xb5\x51\x47\xae\x32\x2e\x23\x15\x0a\x0a\x25\x8d\x7a\x41\x85\x76\xbd\x20\xeb\x05\xc5\x82\xb2\x59\x51\xc8\x44\x19\xe7\xbc\x17\x50\x36\x2b\x54\x3a\x54\x2c\x31\xa0\x55\x58\x0e\x8b\x07\x7d\x94\x76\xa6\x9b\x16\x4a\x3b\x59\xef\x9c\x66\xac\x22\x4a\xa3\xe9\x3b\xa9\x19\xb7\x9e\x59\xdc\x1c\xed\x7b\xa0\x53\x41\x51\xe9\x50\x2a\x2c\x5d\x94\xb2\xd6\xda\x55\xa5\xe5\x4f\xc9\x8c\xe4\xd0\x7f\xce\xe3\x1f\x0c\x85\x1f\xf4\x26\x29\xfa\xd3\xff\xa6\xa8\x16\xd9\x7c\xcd\x1f\x5b\x1d\xff\xd0\x6f\xfb\x9a\xb3\x78\xed\xa3\x48\x5a\x7d\xa4\x1e\x9d\x9c\xb6\xc2\x41\xf2\x69\x2a\x87\xd7\xf3\x93\xb7\xe1\xe2\xcd\x35\xf9\xfd\x83\x3c\x66\xa7\xe3\xdf\xcf\xcc\xdb\x8f\xd1\xdd\xdd\xe8\x94\x9d\xdc\x9c\x0d\x86\xb7\x57\xaf\x9e\xf5\xd7\x28\x8f\x0d\xd1\xdd\x01\x3f\x72\xba\x1c\x6b\x46\x14\x4c\xb5\x14\x97\xc4\x10\xe8\xaf\x67\xdb\xba\x69\x5d\x0d\xaf\x3f\xc0\x6a\xf5\xbc\xb4\xd5\xeb\xc1\x57\x1a\x17\x83\xf0\x57\xc1\xee\xeb\xb6\x94\x18\x32\x20\x73\xe8\x83\xc5\xf1\x13\xcb\x1e\x6f\xed\xac\x51\x31\xcc\xf2\x53\x44\xf0\xf9\xcb\xf3\x9f\x72\xcd\x81\x37\x4e\x45\x68\x2b\xdc\x6b\xc0\x72\x5d\x08\x6b\x19\xa4\x09\x25\x06\xed\xae\xaa\x1a\x1e\x80\x6d\x14\xd6\x53\xde\x20\xa1\x0f\x5f\xfd\x30\x22\x4c\x78\x07\x9e\x9b\x55\x8e\xdb\xf0\xc7\x4c\x50\xcf\xf5\x73\x13\xb7\xd1\xf0\x2b\x35\x5e\xff\xc5\x24\x29\x63\x63\x06\xe3\x5a\x00\x0f\x7e\xd6\xf1\x81\x35\x83\x3e\x1c\xe4\xf6\xcf\xf7\x98\xb3\x31\x78\x99\xb9\xcf\xb4\xe7\x74\x8b\x5e\xee\x34\xf6\x3b\x01\x50\x68\x52\x25\x72\x4f\xfe\x8c\x70\x6f\xaf\x97\xd5\xa3\xba\xd5\x9e\x93\xdb\xf7\x71\x12\x1a\x6f\x8f\x49\x36\x9f\x6a\xbe\x43\x29\xb4\xe4\xe8\x73\x39\xf1\xf2\xdb\xad\x6a\xbf\xfa\x48\xc2\xc8\x2b\xc8\xd2\xdc\x24\xd8\x9b\x6a\x43\xcc\xd6\xa1\xed\xdd\x7c\xf5\x8b\x37\x35\x5d\xa0\x35\x21\x33\xcd\x87\xda\xc3\x6b\x2a\x1c\xe4\x36\x2f\x39\x49\x34\xd2\x8a\x9b\x19\xe1\x4d\x60\x3b\x2e\x37\x78\x92\xb3\x18\xfa\x20\x70\x0e\x97\xc4\xa0\xd7\x6e\x3c\x7f\x12\x6c\x1b\x5a\x2b\x25\x2d\xcf\x97\xb6\xd6\xba\xd5\x70\x9a\xe0\x62\xee\xd2\xed\x82\xf5\x15\x1c\xb6\xdb\x6d\xbf\xdd\x68\x82\x6b\x58\x8c\x56\x5a\x84\x66\xab\x68\x68\x48\x9c\xe8\xcf\xec\x0b\xb4\xc0\xdb\xd4\xda\x13\xbb\xa7\xd1\xc8\xb6\x36\x56\x0f\xb2\xba\x61\xbc\x9f\xa4\x3a\xf2\x94\x9c\x6f\x67\x7e\x55\x17\x54\x72\x5f\xd1\x6c\xa4\xd5\xca\x5a\x17\x63\xa5\xf0\xa8\x22\xf3\xac\x81\xd6\xeb\xee\xc0\x73\xff\x99\x45\xe2\x36\x7c\x8c\x13\xb3\xa8\x71\x60\x53\xe6\xc5\x6d\x96\x4d\x38\x87\xaa\xdd\xbe\xe5\x42\xb7\x3c\x56\xb3\xaa\xcb\x6f\xd8\xd5\x21\x31\x06\x55\xc2\xa5\x71\x6b\xfa\xfb\x6e\x71\xb1\x35\xe9\xa2\x5b\xe6\xa1\xa6\x08\x25\x97\xca\x6e\x59\x24\xe8\x36\x21\x08\xec\xd7\x96\x42\x98\x33\xce\x61\x84\x60\xe6\x12\x38\x13\xa8\x61\xce\x4c\x04\x94\x8d\xc7\xa8\xec\xf4\xce\x36\x6a\x90\xc2\x6e\xc8\x63\xad\xe2\x4e\x52\x46\xb1\xbb\x4d\xaa\xfb\x2e\x2c\x33\xce\x76\x61\x69\x1b\x72\x17\xdc\x01\x72\x62\xd8\x0c\x21\x6b\xaa\x43\x26\x42\x84\xac\xa9\x82\xa7\x31\x94\x8a\xea\x86\xdb\x84\x84\x50\xca\xc4\xa4\x0b\x9d\x93\x55\x65\x75\xd4\x5e\x35\xeb\x1e\x16\xa5\x07\x77\x90\x7f\x18\x14\xd0\x19\x9c\xd8\x82\x7b\x08\xa0\x23\x39\x7f\xa5\x18\x7d\x67\x0f\xdd\x05\xf7\x7e\xe1\xd6\xa8\x53\x33\x4f\x78\x3a\x61\x42\x77\xe1\x73\x1d\xa4\xcc\x2e\x49\x98\x5f\x58\xf9\x13\x34\x9e\x6b\xa4\xe4\x86\x25\x6e\xc3\x6b\x54\xf7\x7c\xa9\x52\xd2\x57\x68\x5f\x09\x6e\x64\x49\xa9\x87\x2c\xad\xd0\xb0\x24\xe9\x81\xe7\x14\x0d\xdc\x69\xf8\x21\x67\xe1\xb7\x9d\x43\x64\x9b\xe3\x1b\x71\x0d\x74\x13\x4f\x15\xdf\x46\x94\x7f\x1e\xb9\xfb\x3d\x64\x5d\x1f\x79\xde\xf4\x4d\xc4\xf4\x63\x2d\xd1\x1a\x6d\xb7\xfa\x8a\x69\x36\x0e\xac\xc9\x98\x29\x6d\x3b\xef\xde\xa9\x70\x50\x99\x60\x79\xdf\xdb\x1d\x5d\x6e\x9b\x85\xe5\x27\x4a\x26\x9e\x5b\x20\xba\x4d\x30\x2a\xc5\xad\x86\x51\x5d\xae\x00\xb9\xc6\xbf\xde\xed\x98\x70\xbd\xd7\xef\x0f\x66\x6f\x0d\x56\x7d\x4b\xea\x05\xf9\x3b\x74\x2f\xc8\xff\xc7\xf5\xff\x00\x00\x00\xff\xff\x40\x3b\x0e\xbd\xeb\x12\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 4843, mode: os.FileMode(420), modTime: time.Unix(1473954664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/main.html": assetsMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

