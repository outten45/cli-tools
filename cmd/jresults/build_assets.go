// Code generated by go-bindata.
// sources:
// assets/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xdb\x72\x1a\x47\x10\x7d\xcf\x57\x74\x36\x0f\x0b\x0e\xec\x22\x21\xf9\xb2\x06\x55\x39\x92\x6f\xb2\x7c\x09\xc8\xb2\x55\x2e\x57\x6a\xd8\x69\xd8\xc1\xb3\x33\x5b\x33\xbd\x20\x42\xf1\xef\xa9\xd9\x0b\x8b\x14\x2c\xc7\x2f\xd1\x83\x44\x77\x9f\x3e\x3d\x7d\xba\x67\xc4\x20\xa1\x54\x9e\xfc\x02\x30\x48\x90\x71\xf7\x01\x60\xf0\x6b\xb7\x0b\x17\x8c\xd0\x12\xc4\x3a\xcd\x84\x44\x0e\x4c\x71\x48\x85\x12\x53\x81\x1c\x4e\xc7\x63\xe8\x76\x2b\xb4\x14\xea\x1b\x18\x94\x43\xcf\xd2\x4a\xa2\x4d\x10\xc9\x83\xc4\xe0\x74\xe8\x25\x44\x99\x8d\xc2\x30\x65\x37\x31\x57\xc1\x44\x6b\xb2\x64\x58\xe6\x8c\x58\xa7\xe1\xd6\x11\xf6\x83\x7e\xf0\x28\x8c\xad\x6d\x7c\x41\x2a\x54\x10\x5b\xeb\x81\x50\x84\x33\x23\x68\x35\xf4\x6c\xc2\xfa\x8f\x8f\xba\x7f\x5c\x5d\x0b\x31\x7e\xfd\x02\xdf\x1c\xf0\x97\xe9\xf9\xe8\xd9\xb7\x55\x9c\xbf\x7a\xf6\x6a\x34\xeb\x1f\xbe\x4f\x3f\xc6\xcb\xe5\x23\xad\xfa\xa3\x6b\x3e\x3b\xba\x62\xbf\x7f\x48\xc7\x97\xf6\xef\xf0\xcd\xc3\xc7\x8b\x09\x7f\x3e\x4f\x8e\x72\x0f\x62\xa3\xad\xd5\x46\xcc\x84\x1a\x7a\x4c\x69\xb5\x4a\x75\x6e\xbd\x1d\x09\xde\x67\x24\xb4\x62\x12\x28\xc1\x14\xff\x87\x86\xbb\x45\xa1\xfb\xda\x36\xaf\x56\xfa\xdd\x81\x18\xd9\xab\xcf\x57\x47\xea\xac\x77\x9e\x93\x54\x2f\x99\x95\xa7\xe7\xf9\xe9\xa3\x7c\x39\xe7\xf9\xa7\x27\xe3\x2b\x73\xb1\x18\x5d\x6b\xfd\x21\x3b\x9c\x7c\xba\x9e\xa5\xb3\xf3\x3f\x5f\x7f\x5e\xca\x70\x9c\xfd\xa8\xed\xfd\xad\xd1\x2a\xc3\xa1\x47\x78\x43\x61\x71\xae\xb2\xd5\x30\x74\x4d\xcd\x2d\x47\x29\x16\x26\x50\x48\x21\xb1\x3c\x4e\x98\x21\x1b\xca\x62\x7d\x9c\xe3\xb4\x70\x6c\x9b\x2a\x76\x2d\xac\x97\x6d\x30\xd1\x7c\x05\xb1\x64\xd6\x0e\xbd\x58\x2b\x62\x42\xa1\xa9\x4f\x93\x1c\x9c\x9c\xbf\x45\x42\x03\x06\x6d\x2e\xc9\xc2\xd4\xe8\x14\xd6\x6b\x08\xc6\xc4\x0c\x5d\x8a\x14\x83\x17\xda\xa4\x8c\xc0\x3b\x67\x0a\x7a\x87\x1d\x38\xec\xf5\x1e\xc2\xc1\x71\xd4\x3b\x8a\x7a\xc7\xf0\x7c\x7c\xe9\xc1\x66\x33\x08\x93\x83\x8a\x94\xd8\x44\x62\x5d\xb2\x34\x8a\xdf\x5d\x4b\x46\x64\xc8\x2b\x6b\xa2\x0d\x47\xb3\x35\x13\xbd\x40\x53\x7d\x8e\xb5\xe2\xa8\xec\x36\x66\xd0\x66\x5a\x59\xb1\xc0\xea\xe0\xae\x4a\x73\x9d\x4a\xdb\x34\x46\x11\x3e\xb9\x60\x13\x94\x83\x90\x92\xbb\x81\x31\x4b\x33\x89\x76\x5f\xe8\x2d\x32\xb5\x37\x85\x98\xe2\xcc\x70\x38\xc3\x85\x60\x6e\x6b\xf7\x67\x73\xb1\x3f\xff\xc9\x31\x7c\x40\x13\xa3\x22\x21\xf1\x36\x60\x10\x36\x47\x77\x91\x9d\xb6\x06\xe4\xa6\xd7\x40\xd7\x6b\x30\x4c\xcd\xb0\x98\x0e\x8d\xaa\x91\x6d\x36\xdf\x57\x81\x9f\xac\xd7\x5d\x08\x0a\x29\x8a\x29\x11\xdf\x0b\xa8\x24\xb9\x0f\xe2\xa4\xb9\x97\xa2\x92\x68\xab\xd0\xfd\x64\x4e\xa9\xfb\x10\x95\x5c\x4f\x8e\xff\x05\xda\x15\xac\xd0\x04\x15\x87\x46\x85\x41\xb8\xa3\xda\x20\x2c\x36\xa8\x32\xb8\x58\x80\xe0\x43\xaf\xb8\x42\xde\xc9\x20\xe4\x62\x51\x85\x6c\x6c\x44\x46\x60\x4d\xbc\xf7\xde\xf1\xfe\x7c\x7b\xe5\x78\xbf\xb8\x6b\x73\xeb\x81\x23\xb2\x48\x43\x2f\xa7\x69\xf7\xb1\x63\x2c\x79\xfe\x1b\x69\xae\x38\x1a\x1b\x6b\x83\x0d\x79\xe3\xeb\xd6\x45\x76\x1e\x87\x39\x5b\xb0\x92\xf4\x67\x6b\xfd\xe0\xe1\xf8\xe9\x3a\xdf\x01\x17\x98\x05\x33\x30\xb7\x5a\x9d\x31\x62\x30\xac\x5f\x93\x7a\x5f\xcf\xc7\xef\xdf\xc1\x66\xf3\xb4\x1c\x97\xc3\xda\xfa\xa9\x69\xc0\xd5\xd3\xf3\x51\x89\x9b\xdb\x58\xce\x88\x8d\xd8\x12\x86\xe0\x78\x82\xcc\xe9\xdf\xaa\x8b\xb5\x77\x80\x45\xb7\xd5\x09\xbe\x7c\xad\x02\x7f\x05\xc8\xe2\xa4\x55\x91\x74\x60\x9a\xab\xd8\xad\x6a\x6b\x6e\x89\x51\x1b\xd6\xcd\x26\x56\xd0\x22\x10\x3c\x97\x2c\xb3\xc8\x77\x12\x16\x4c\x76\x40\xdc\xca\x00\x08\x1f\x94\x67\x84\x21\x28\x5c\xc2\x19\x23\x6c\xf5\xda\x4f\x1f\x84\xbb\x20\x87\x30\xda\x75\xb0\x76\x22\x46\x50\x96\x28\xae\x68\x07\x7c\x2c\x4b\xf9\x11\xb8\x1a\xe1\x41\xaf\xd7\x0b\x7a\xed\x0e\xf8\x24\x52\x74\xde\xea\x48\x4e\x9f\x31\xb1\x34\xb3\x5f\xc4\x57\xe8\x42\x6b\xab\xe2\x03\x97\xd3\x6e\x17\xa9\xed\x5a\xbb\xf2\x67\x2b\x4a\x90\xe5\x36\x69\x19\xbd\x6c\xef\xc4\x37\xb5\xe1\x3e\xdc\x51\xb2\x6a\xa9\xd9\x9a\xe2\x4f\x6b\xdb\xbe\x93\x34\x6a\xf8\x3b\xb5\xbf\x6c\xd1\xb7\x31\x23\x42\x93\x49\x4d\xfe\x36\x76\x13\x55\x5d\x6d\x3d\xab\xa8\x11\x60\xeb\x8c\xb5\xd4\xc6\x41\x57\x19\xfa\x1d\x08\x43\xf7\x75\xc1\x20\x2c\x85\x94\x30\x41\xa0\xa5\x06\x29\x14\x5a\x58\x0a\x4a\x80\x8b\xe9\x14\x0d\x2a\x2a\x13\x2d\x68\xe5\x12\xca\xb3\xd5\x9c\xb3\x5c\x70\x8c\x76\xa7\x77\x13\xc1\x5a\xba\x19\x44\xb0\x76\x6b\x1d\x81\x3f\x42\xc9\x48\x2c\x10\x8a\xdd\x1c\x0b\x15\x23\x14\xbb\x09\x2d\x8b\xb1\x36\xdc\xb6\xfd\x0e\x64\x8c\x73\xa1\x66\x11\xf4\x8f\x37\x3b\xd6\x61\x6f\xd3\x69\xd8\x57\x0d\xbb\x3f\x2a\xff\x9b\x55\xb4\x05\x95\xba\x43\x75\x3b\xd9\x26\x7a\xf9\xd2\x08\x7e\xe1\x9a\x8c\xc0\xbf\x59\xf9\x75\xb0\x81\x65\x32\x9f\x09\x65\x23\xf8\xd2\x24\x36\xd3\x62\x99\x08\x2a\x44\x30\x43\x6a\xf9\xa4\xb5\x24\x91\xf9\xed\x56\xbb\xc6\x7f\xbd\x3b\xfc\x42\xb1\xc0\xa0\x7b\x92\x2e\x75\xcb\xff\xad\x70\xf8\xd5\x96\xec\xbe\x0b\x83\xb0\x7c\x72\x07\x61\xf9\x6d\xf7\x9f\x00\x00\x00\xff\xff\x3f\x2b\x18\x1b\xf5\x0a\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 2805, mode: os.FileMode(420), modTime: time.Unix(1473624061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/main.html": assetsMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

