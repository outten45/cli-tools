// Code generated by go-bindata.
// sources:
// assets/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x94\x5f\x53\xd3\x40\x14\xc5\xdf\xfd\x14\x6b\x5e\x9d\x64\x85\x16\x01\x67\xcb\x0c\x82\x02\x05\x05\x1b\x2d\xf4\x71\x93\xbd\x24\x0b\xfb\x27\xb3\xf7\xa6\xb5\x74\xfa\xdd\x9d\xb4\xb1\xad\x5a\xfb\x68\x1e\x32\x7b\xf6\xdc\x9b\xcd\xf9\xe5\x4e\x44\x49\xd6\x9c\xbc\x62\x4c\x94\x20\x55\xb3\x60\x4c\xbc\x8e\x63\x76\x23\x09\x90\x58\xee\x6d\xa5\x0d\x28\x26\x9d\x62\x56\x3b\xfd\xa8\x41\xb1\xb3\x34\x65\x71\xdc\x56\x1b\xed\x9e\x59\x00\xd3\x8b\x90\xa6\x06\xb0\x04\xa0\x88\x95\x01\x1e\x7b\x51\x49\x54\xe1\x7b\xce\xad\xfc\x91\x2b\x97\x64\xde\x13\x52\x90\x55\x23\x72\x6f\xf9\x6a\x83\x77\x92\x4e\x72\xc8\x73\xc4\xf5\x5e\x62\xb5\x4b\x72\xc4\x88\x69\x47\x50\x04\x4d\xd3\x5e\x84\xa5\xec\x1c\x75\xe3\x0f\xc3\x91\xd6\xe9\xd5\x27\xb8\xde\x53\x17\xb6\x3f\x38\x7d\x9e\xe6\xf5\xe5\xe9\xe5\xa0\xe8\xec\xdf\xda\xef\xf9\x64\x72\xe8\x5d\x67\x30\x52\x45\x77\x28\xdf\xdc\xd9\xf4\x1b\xbe\xf0\xeb\x77\x47\xe3\x4c\x7d\x7c\x2a\xbb\x75\xc4\xf2\xe0\x11\x7d\xd0\x85\x76\xbd\x48\x3a\xef\xa6\xd6\xd7\x18\x6d\x20\xb8\xad\x48\x7b\x27\x0d\xa3\x12\x2c\xfc\x87\xc0\xf1\xe2\xa0\x5d\xb1\xc3\xe5\xd4\x7f\xd9\xd3\x03\x1c\x3e\x0c\xbb\xee\xfc\x6d\xbf\x26\xe3\x2e\x24\x9a\xb3\x7e\x7d\x76\x58\x4f\x9e\x54\x7d\x7f\x9c\x0e\xc3\xcd\x78\x30\xf2\xfe\xae\xda\xcf\xee\x47\x85\x2d\xfa\x5f\xaf\x1e\x26\x86\xa7\xd5\xce\xd8\x82\xff\x9a\x01\x91\x79\x35\x6d\xd3\x92\xcc\x0c\xb0\xdc\x48\xc4\x5e\xb4\x14\x8b\x7b\x8c\x14\x74\x05\xaa\x55\x99\x0f\x0a\xc2\x4a\x96\x7e\x0c\xa1\x5d\xe7\xde\x29\x70\xb8\xf2\x02\x60\xe5\x1d\xea\x31\xb4\xb4\x9b\x53\xd6\xe3\xb7\xd4\x61\x2d\x16\xf6\xc9\x8d\xcc\xc0\x08\x4e\xe5\x9f\x46\x2a\x6d\x65\x00\xb7\x59\x9f\x41\xba\xad\x2d\x24\x9d\x92\x41\xb1\x73\x18\x6b\xd9\x7c\xe5\xed\xdd\x4a\x6f\xef\x3f\x3e\x60\x77\x10\x72\x70\xa4\x0d\xfc\x5e\x20\xf8\xfa\xd5\x1b\x67\x23\x96\xa0\x35\xd6\xe6\x9a\xcd\x58\x90\xae\x00\x96\xa4\x24\x69\x00\x58\x1b\x42\x36\x9f\xff\x9b\x82\x3a\x99\xcd\x62\x96\x2c\x50\xb0\xf9\x5c\x70\x52\x5b\x0b\x52\xfd\x02\xbb\xfc\x86\xcb\xce\xfe\x96\xcf\x0a\xcf\xee\x87\x35\x98\x76\x55\xb4\xac\x8e\x0f\xfe\x2a\xda\xa4\xb5\x00\x02\x4e\xb1\x35\x02\xc1\x37\x90\x09\xbe\x18\x9f\xe5\xa4\x2e\xb7\x05\x5f\xfe\xbe\x7e\x06\x00\x00\xff\xff\xba\xcf\x33\x77\xc6\x04\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 1222, mode: os.FileMode(420), modTime: time.Unix(1473532959, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/main.html": assetsMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

