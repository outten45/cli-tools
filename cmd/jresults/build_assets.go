// Code generated by go-bindata.
// sources:
// assets/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x6d\x73\xdb\x38\x0e\xfe\xbe\xbf\x02\xa7\xcb\x8e\xa4\x9e\x2d\x39\x71\x92\xb6\xae\x9d\x99\x5e\xda\x6d\x9b\xbe\xa4\x67\x67\xd3\xcd\x76\x3a\x1d\x5a\x84\x2d\xba\x14\xa9\x23\x29\x3b\x3e\x8f\xff\xfb\x0d\x25\xd9\x92\x9c\xc4\x3b\xdd\xee\xac\x3f\x64\x44\x00\x7c\x00\x12\x0f\x00\x29\xfd\xd8\x24\xfc\xec\x27\x80\x7e\x8c\x84\xda\x07\x80\xbe\x61\x86\xe3\xd9\xc5\x7b\x34\xa8\x40\xa1\xce\xb8\xd1\x30\x51\x32\x81\xd5\x0a\x82\x91\x21\xca\x5c\xb1\x04\x83\x5f\xa4\x4a\x88\x01\xe7\x82\x08\xe8\x1c\xb5\xe0\xa8\xd3\x39\x85\xc3\x93\x5e\xe7\xb8\xd7\x39\x81\x97\xa3\x2b\x07\xd6\xeb\x7e\x58\xc0\x15\xd0\xff\x68\xb7\xe1\x1d\x31\xa8\x0d\x44\x32\x49\x19\x47\x0a\x44\x50\x48\x98\x60\x13\x86\x14\xce\x47\x23\x68\xb7\x4b\x6b\xce\xc4\x37\x50\xc8\x07\x8e\x36\x4b\x8e\x3a\x46\x34\x0e\xc4\x0a\x27\x03\x27\x36\x26\xd5\xbd\x30\x4c\xc8\x6d\x44\x45\x30\x96\xd2\x68\xa3\x48\x6a\x17\x91\x4c\xc2\xad\x20\xec\x06\xdd\xe0\x71\x18\x69\x5d\xc9\x82\x84\x89\x20\xd2\xda\x01\x26\x0c\x4e\x15\x33\xcb\x81\xa3\x63\xd2\x7d\x72\xdc\xfe\xf7\xf5\x0d\x63\xa3\x37\xbf\xe0\xdb\x43\xfa\x2a\xb9\x18\x3e\xff\xb6\x8c\xb2\xd7\xcf\x5f\x0f\xa7\xdd\xa3\xcb\xe4\xd7\x68\xb1\x78\x2c\x45\x77\x78\x43\xa7\xc7\xd7\xe4\x5f\x1f\x93\xd1\x95\xfe\x5f\xf8\xf6\xf4\xc9\x7c\x4c\x5f\xce\xe2\xe3\xcc\x81\x48\x49\xad\xa5\x62\x53\x26\x06\x0e\x11\x52\x2c\x13\x99\x69\xa7\x76\x05\x97\xa9\x61\x52\x10\x0e\x26\xc6\x04\xff\x86\x03\xb7\x73\x47\xfb\x8e\xad\x5e\x2f\xe5\x87\x43\x36\xd4\xd7\xbf\x5d\x1f\x8b\x17\x9d\x8b\xcc\x70\xf1\x8a\x68\x7e\x7e\x91\x9d\x3f\xce\x16\x33\x9a\x7d\x7a\x3a\xba\x56\xef\xe6\xc3\x1b\x29\x3f\xa6\x47\xe3\x4f\x37\xd3\x64\x7a\xf1\x9f\x37\xbf\x2d\x78\x38\x4a\xff\xe8\xd8\xf7\x1f\xcd\x2c\x53\x1c\x38\x06\x6f\x4d\x98\xc7\x55\x1c\x35\x0c\xed\xa1\x66\x9a\x22\x67\x73\x15\x08\x34\xa1\x21\x59\x14\x13\x65\x74\xc8\x73\xfa\x58\xc1\x79\x2e\xd8\x1e\x2a\xa7\x71\xb8\xe1\x71\x7f\x2c\xe9\x12\x22\x4e\xb4\x1e\x38\x91\x14\x86\x30\x81\x6a\x13\x4d\x7c\xf8\xd7\xf1\x3b\x3e\xdc\xd4\x0d\x19\x73\xdc\xb8\x2c\x16\xf9\xdf\xb6\x36\x8a\xa5\x48\xcb\xd5\x58\x2a\x8a\x6a\xbb\x8c\xe5\x1c\x55\xf9\x1c\x49\x41\x51\xe8\xad\x4e\xa1\x4e\xa5\xd0\x6c\x8e\x65\xe0\xd6\x4b\x55\xa9\xc5\x5a\x55\x8b\x5c\x7d\xd6\x67\x22\xcd\x4c\x79\xb7\x51\x8c\xd1\xb7\xb1\xbc\x75\x80\xd1\x72\xf5\x9c\x73\x07\xe6\x84\x67\x1b\x35\x10\x2b\xc9\x1f\x91\x9e\xf5\x43\x13\xef\x42\xbe\x23\x63\xe4\xf7\x29\x46\x24\x49\x39\xea\xfb\x54\xef\x91\x08\xf0\x12\x8d\x91\x7f\xef\x4e\x43\x04\x25\x8a\xc2\x0b\x9c\x33\x62\xeb\x61\x8f\xf1\x7b\xa4\x6c\x2f\xda\xd3\x13\xf8\x88\x2a\x42\x61\x18\xc7\x3d\x76\x3f\xc3\x4b\xa5\xa4\x02\xef\x5c\x66\xc2\xec\x98\xf4\xc3\xea\x32\xad\xa6\x76\xd1\x7d\x63\xf9\x54\x99\xae\x56\xa0\x88\x98\x62\xce\x17\x33\x2c\x49\xb4\x5e\x3f\x9c\x17\xba\x2f\x2f\x96\x78\xf9\x1d\x03\xac\xd7\xdb\xe4\x54\x52\x2b\x2c\x89\xc5\xad\x40\x37\xd2\x45\x77\x3d\xad\x56\xed\x6a\xe7\x3d\x06\x5b\x92\xe2\xad\x69\x2b\x36\x8d\x8d\x53\xec\x29\xd3\xf9\x7d\xbb\x52\xc5\x84\x99\x80\xf3\xf3\x69\xd0\x9d\x38\x10\xe4\x89\xff\x21\x84\x0d\x37\x2a\x6a\x7c\xdf\x31\x4a\xba\x7c\xdf\xa6\x92\x3f\x4f\x4f\xfe\x74\xec\x87\x36\xf6\x9c\x5f\x25\x16\xac\xd7\xe0\xd9\x2c\xe6\x42\x7b\xad\x7e\x13\xb9\xce\xb8\x9c\x54\x28\x28\x54\x34\xea\x87\x35\xda\xf5\xc3\xbc\x29\x94\x0b\xca\xe6\x65\x45\x13\x65\x9c\xb3\x7e\x48\xd9\xbc\x54\xe9\x48\xb1\xd4\x80\x56\x51\x35\x35\xee\x34\x54\xda\x9d\x6d\x7b\x29\xed\xe6\x4d\x74\x96\xb3\x8a\x28\x8d\x66\xe0\x64\x66\xd2\x7e\x62\x71\x0b\xb4\xef\x81\xce\x04\x45\xa5\x23\xa9\xb0\x72\x51\xc9\xda\x1b\x57\xb5\xde\x3f\x23\x73\x52\x40\xff\x39\x8f\x7f\x30\x1d\x7e\xd0\x9b\xa4\x18\xcc\xfe\x9b\xa1\x5a\xe6\x83\xb6\x78\x6c\x77\x83\xc3\xa0\x13\x68\xce\x92\x8d\x8f\x32\x69\xcd\xd9\x7a\x74\x72\xda\x8e\x86\xe9\xa7\x99\x1c\x5d\x2e\x4e\xde\x46\xcb\x37\x97\xe4\xf7\x0f\xf2\x98\x9d\x4e\x7e\x7f\x6a\xde\x7e\x8c\x6f\x6e\xc6\xa7\xec\xe4\xea\xe9\x70\x74\x7d\xf1\xea\xc9\x60\x83\xf2\xd0\x34\xbd\x3f\xe0\x07\x4e\x57\x60\xcd\x89\x82\x99\x96\xe2\x05\x31\x04\x06\x9b\x21\xb7\x69\x5a\x17\xa3\xcb\x0f\xb0\x5e\x3f\xab\x6c\xf5\x66\x02\x56\xc6\xe5\x44\xfc\x55\xb0\xdb\xa6\x2d\x25\x86\x0c\xc9\x02\x06\x60\x71\x82\xd4\xb2\xc7\xdb\x38\xf3\x6b\x86\x79\x7e\xca\x08\x3e\x7f\x79\xf6\x53\xa1\x39\xf0\x26\x99\x88\x6c\x85\x7b\x3e\xac\x36\x85\xb0\x91\x41\x96\x52\x62\xd0\xee\xaa\xab\xe1\x0e\xd8\x56\x61\x3d\x15\x0d\x12\x06\xf0\x35\x88\x62\xc2\x84\x77\xe0\xb9\x79\xe5\xb8\x7e\x30\x61\x82\x7a\x6e\x50\x98\xb8\xbe\x1f\xd4\x6a\xbc\xf9\x4b\x48\x5a\xc5\xc6\x0c\x26\x8d\x00\xee\xfc\xac\xe3\x03\x6b\x06\x03\x38\x28\xec\x9f\xed\x31\x67\x13\xf0\x72\xf3\x80\x69\xcf\xe9\x95\xbd\xdc\xf1\xf7\x3b\x01\x50\x68\x32\x25\x0a\x4f\xc1\x9c\x70\x6f\xaf\x97\xf5\x83\xba\xf5\x9e\x93\xdb\x17\x73\x12\x19\x6f\x8f\x49\x3e\x9f\x1a\xbe\x23\x29\xb4\xe4\x18\x70\x39\xf5\x8a\xdb\xad\x6b\xbf\x06\x48\xa2\xd8\x2b\xc9\xd2\xda\x26\xd8\x9b\x69\x43\xcc\xce\xa1\xed\xdd\x7c\x0d\xca\x57\x36\x5d\xa2\xb5\x20\x37\x2d\x86\xda\xdd\x6b\x2a\x1d\x14\x36\x2f\x39\x49\x35\xd2\x9a\x9b\x39\xe1\x2d\x60\xf7\x5c\x6e\xf8\xa8\x60\x31\x0c\x40\xe0\x02\x5e\x10\x83\x5e\xc7\x7f\xf6\x28\xdc\x35\xb4\x56\x4a\x5a\x9e\xaf\x6c\xad\xf5\xea\xe1\xb4\xc0\xc5\xc2\xa5\xdb\x03\xeb\x2b\x3c\xec\x74\x3a\x41\xc7\x6f\x81\x6b\x58\x82\x56\x5a\x86\x66\xab\x68\x64\x48\x92\xea\xcf\xec\x0b\xb4\xc1\xdb\xd6\xda\x23\xbb\xc7\xf7\xf3\xad\xfe\xfa\x4e\x56\xb7\x8c\x0f\xd2\x4c\xc7\x9e\x92\x8b\xdd\xcc\xaf\x9b\x82\x5a\xee\x6b\x9a\xad\xb4\x5e\x59\x9b\x62\xac\x15\x1e\x55\x64\x91\x37\xd0\x66\xdd\x1d\x78\xee\x3f\xf3\x48\x5c\x3f\xc0\x24\x35\xcb\x06\x07\xb6\x65\x5e\xde\x66\xd5\x84\x0b\xa8\xc6\xed\x5b\x2e\xf4\xaa\x63\xb5\xea\xba\xe2\x86\x5d\x1d\x11\x63\x50\xa5\x5c\x1a\xb7\xa1\xbf\xed\x95\x17\xdb\x90\x2e\x7b\x55\x1e\x1a\x8a\x48\x72\xa9\xec\x96\x65\x8a\x6e\x0b\xc2\xd0\x7e\x76\x29\x84\x05\xe3\x1c\xc6\x08\x66\x21\x81\x33\x81\x1a\x16\xcc\xc4\x40\xd9\x64\x82\xca\x4e\xef\x7c\xa3\x06\x29\xec\x86\x22\xd6\x3a\xee\x34\x63\x14\x7b\xbb\xa4\xba\xed\xc1\x2a\xe7\x6c\x0f\x56\xb6\x21\xf7\xc0\x1d\x22\x27\x86\xcd\x11\xf2\xa6\x3a\x62\x22\x42\xc8\x9b\x2a\x78\x1a\x23\xa9\xa8\xf6\xdd\x16\xa4\x84\x52\x26\xa6\x3d\xe8\x9e\xac\x6b\xab\xa3\xce\xba\xd5\xf4\xb0\xac\x3c\xb8\xc3\xe2\x0b\xa1\x84\xce\xe1\xc4\x0e\xdc\x5d\x00\x1d\xcb\xc5\x2b\xc5\xe8\x3b\x7b\xe8\x1e\xb8\xb7\x4b\xb7\x41\x9d\x86\x79\xca\xb3\x29\x13\xba\x07\x9f\x9b\x20\x55\x76\x49\xca\x82\xd2\x2a\x98\xa2\xf1\x5c\x23\x25\x37\x2c\x75\x7d\xcf\xaf\xef\xf9\x52\xa7\x64\xa0\xd0\xbe\x12\x5c\xc9\x8a\x52\x77\x59\x5a\xa3\x61\x45\xd2\x03\xcf\x29\x1b\xb8\xe3\x07\x11\x67\xd1\xb7\x7b\x87\xc8\x2e\xc7\xb7\xe2\x06\xe8\x36\x9e\x3a\xbe\x8d\xa8\xf8\x4e\x72\xf7\x7b\xc8\xbb\x3e\xf2\xa2\xe9\x9b\x98\xe9\x87\x5a\xa2\x35\xda\x6d\xf5\x35\xd3\x7c\x1c\x58\x93\x09\x53\xda\x76\xde\xbd\x53\xe1\xa0\x36\xc1\x8a\xbe\x77\x7f\x74\x85\x6d\x1e\x56\x90\x2a\x99\x7a\x6e\x89\xe8\xb6\xc0\xa8\x0c\x77\x1a\x46\x7d\xb9\x06\xe4\x1a\xff\x7a\xb7\x13\xc2\xf5\x5e\xbf\x3f\x98\xbd\x0d\x58\xfd\x2d\xa9\x1f\x16\xef\xd0\xfd\xb0\xf8\x67\xd7\xff\x03\x00\x00\xff\xff\x4f\xc1\x53\xbd\xf4\x12\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 4852, mode: os.FileMode(420), modTime: time.Unix(1473954506, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/main.html": assetsMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

