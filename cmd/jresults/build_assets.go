// Code generated by go-bindata.
// sources:
// assets/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x6f\x73\xdb\x38\xce\x7f\xbf\x9f\x02\x8f\x9e\xec\x48\xee\xd9\x92\x13\x27\x69\xeb\xda\x9d\xe9\x25\xdd\xb6\xe9\x9f\xf4\xec\x6c\xba\xd9\x4e\xa7\x43\x8b\xb0\x45\x97\x22\x75\x24\x65\xc7\xe7\xf1\x77\xbf\xa1\x24\x5b\x92\xe3\x78\x9b\x76\xe7\xf2\xa2\x63\x02\xe0\x0f\x20\xf0\x23\x08\xb5\x17\x99\x98\x3f\xff\x05\xa0\x17\x21\xa1\xf6\x07\x40\xcf\x30\xc3\xf1\xf9\xc5\x7b\x34\xa8\x40\xa1\x4e\xb9\xd1\x30\x56\x32\x86\xe5\x12\xfc\xa1\x21\xca\x5c\xb1\x18\xfd\xdf\xa4\x8a\x89\x01\xe7\x82\x08\x68\x1f\x35\xe1\xa8\xdd\x3e\x85\xc3\x93\x6e\xfb\xb8\xdb\x3e\x81\x97\xc3\x2b\x07\x56\xab\x5e\x90\xc3\xe5\xd0\xff\xd7\x6a\xc1\x3b\x62\x50\x1b\x08\x65\x9c\x30\x8e\x14\x88\xa0\x10\x33\xc1\xc6\x0c\x29\x9c\x0d\x87\xd0\x6a\x15\xd6\x9c\x89\x6f\xa0\x90\xf7\x1d\x6d\x16\x1c\x75\x84\x68\x1c\x88\x14\x8e\xfb\x4e\x64\x4c\xa2\xbb\x41\x10\x93\xdb\x90\x0a\x7f\x24\xa5\xd1\x46\x91\xc4\x2e\x42\x19\x07\x1b\x41\xd0\xf1\x3b\xfe\xe3\x20\xd4\xba\x94\xf9\x31\x13\x7e\xa8\xb5\x03\x4c\x18\x9c\x28\x66\x16\x7d\x47\x47\xa4\xf3\xe4\xb8\xf5\xcf\xeb\x1b\xc6\x86\x6f\x7e\xc3\xb7\x87\xf4\x55\x7c\x31\x78\xf1\x6d\x11\xa6\xaf\x5f\xbc\x1e\x4c\x3a\x47\x97\xf1\xef\xe1\x7c\xfe\x58\x8a\xce\xe0\x86\x4e\x8e\xaf\xc9\x3f\x3e\xc6\xc3\x2b\xfd\x9f\xe0\xed\xe9\x93\xd9\x88\xbe\x9c\x46\xc7\xa9\x03\xa1\x92\x5a\x4b\xc5\x26\x4c\xf4\x1d\x22\xa4\x58\xc4\x32\xd5\x4e\x25\x05\x97\x89\x61\x52\x10\x0e\x26\xc2\x18\xff\x07\x07\x6e\x65\x8e\xf6\x1d\x5b\xbd\x5e\xc8\x0f\x87\x6c\xa0\xaf\xff\xb8\x3e\x16\xe7\xed\x8b\xd4\x70\xf1\x8a\x68\x7e\x76\x91\x9e\x3d\x4e\xe7\x53\x9a\x7e\x7a\x3a\xbc\x56\xef\x66\x83\x1b\x29\x3f\x26\x47\xa3\x4f\x37\x93\x78\x72\xf1\xaf\x37\x7f\xcc\x79\x30\x4c\xfe\xea\xd8\xbb\x8f\x66\x16\x09\xf6\x1d\x83\xb7\x26\xc8\xe2\xca\x8f\x1a\x04\xf6\x50\x53\x4d\x91\xb3\x99\xf2\x05\x9a\xc0\x90\x34\x8c\x88\x32\x3a\xe0\x19\x7d\xac\xe0\x2c\x13\x6c\x0e\x95\xd1\x38\x58\xf3\xb8\x37\x92\x74\x01\x21\x27\x5a\xf7\x9d\x50\x0a\x43\x98\x40\xb5\x8e\x26\x3a\xfc\xfb\xf8\x1d\x1d\xae\xef\x0d\x19\x71\x5c\xbb\xcc\x17\xd9\xbf\x2d\x6d\x14\x4b\x90\x16\xab\x91\x54\x14\xd5\x66\x19\xc9\x19\xaa\xe2\x77\x28\x05\x45\xa1\x37\x3a\x85\x3a\x91\x42\xb3\x19\x16\x81\x5b\x2f\xe5\x4d\xcd\xd7\xaa\x5c\x64\xea\xe7\x3d\x26\x92\xd4\x14\xb9\x0d\x23\x0c\xbf\x8d\xe4\xad\x03\x8c\x16\xab\x17\x9c\x3b\x30\x23\x3c\x5d\xab\x81\x58\x49\xf6\x13\xe9\xf3\x5e\x60\xa2\x6d\xc8\x77\x64\x84\x7c\x97\x62\x48\xe2\x84\xa3\xde\xa5\x7a\x8f\x44\x80\x17\x6b\x0c\x1b\x3b\x77\x1a\xea\xc3\x39\xce\xfc\x3d\x36\xef\x91\xb2\xbd\x20\x4f\x4f\xe0\x23\xaa\x10\x85\x61\x1c\xf7\xd8\xfd\x0a\x2f\x95\x92\x0a\xbc\x33\x99\x0a\xb3\x65\xd2\x0b\xca\x1c\x5a\x4d\x25\xbf\x3d\x63\x69\x54\x9a\x2e\x97\xa0\x88\x98\x60\x46\x13\x33\x28\xb8\xb3\x5a\xdd\x5f\x0e\xba\xaf\x1c\x96\x6f\x59\x6a\x01\x56\xab\x4d\x4d\x4a\xa9\x15\x16\x7c\xe2\x56\xa0\x6b\x55\xa2\xdb\x9e\x96\xcb\x56\xb9\x73\x87\xc1\x86\x9b\x78\x6b\x5a\x8a\x4d\x22\xe3\xe4\x7b\x8a\x2a\x3e\x6c\x57\xa2\x98\x30\x63\x70\x7e\x3d\xf5\x3b\x63\x07\xfc\xac\xde\x3f\x85\x30\x34\x44\x50\xa2\xe8\x39\xce\x18\xb1\x1d\xf2\x81\xc7\x28\xe8\xf2\xb0\x4d\x05\x7f\x9e\x9e\xfc\x70\xec\x87\x36\xf6\x8c\x5f\x05\x16\xac\x56\xe0\xd9\x2a\x66\x42\x9b\xd6\x46\x1d\xb9\xca\xb8\x8c\x54\x28\x28\xd4\x69\x34\x96\xd2\xd4\x43\xa9\x11\xab\xa0\xd6\x56\xbc\x39\xd9\xaf\xa4\x21\x5c\x77\xb7\xef\xc1\xfe\x34\xe4\x9b\xf6\x30\xe1\x41\x95\x2c\xd0\xee\xa1\xc4\x8f\x40\x7d\x0f\x37\xbe\xeb\x84\xf7\x92\xe4\xbb\x76\xef\x63\xcb\x83\xf8\x52\xe0\xed\xa4\x4d\x55\xb7\x83\x3d\xdb\xfc\xe9\x05\x35\xb6\xf4\x82\x4a\xd3\xea\x05\xd9\x4b\x52\x2c\x28\x9b\x15\xcf\x00\x51\xc6\x79\xde\x0b\x28\x9b\x15\x2a\x1d\x2a\x96\x18\xd0\x2a\x2c\x47\x8d\x3b\xaf\x30\xed\x4c\x37\x0f\x30\xed\x64\x2f\xef\x34\xeb\x49\x44\x69\x34\x7d\x27\x35\xe3\xd6\x13\x8b\x9b\xa3\x3d\x04\x3a\x15\x14\x95\x0e\xa5\xc2\xd2\x45\x29\x6b\xad\x5d\x55\x06\x86\x29\x99\x91\x1c\xfa\xc7\x3c\xfe\xc5\x48\xf1\x93\xde\x24\x45\x7f\xfa\xef\x14\xd5\x22\x9b\xce\xf2\x9f\xad\x8e\x7f\xe8\xb7\x7d\xcd\x59\xbc\xf6\x51\x14\xad\x3e\x90\x1d\x9d\x9c\xb6\xc2\x41\xf2\x69\x2a\x87\x97\xf3\x93\xb7\xe1\xe2\xcd\x25\xf9\xf3\x83\x3c\x66\xa7\xe3\x3f\x9f\x9a\xb7\x1f\xa3\x9b\x9b\xd1\x29\x3b\xb9\x7a\x3a\x18\x5e\x5f\xbc\x7a\xd2\x5f\xa3\xdc\x37\x82\xed\x0e\xf8\x9e\xd3\xe5\x58\x33\xa2\x60\xaa\xa5\x38\x27\x86\x40\x7f\x3d\x19\xad\x9f\xbc\x8b\xe1\xe5\x07\x58\xad\x9e\x95\xb6\x7a\x3d\x36\x95\xc6\xc5\x18\xf5\xbb\x60\xb7\x75\x5b\x4a\x0c\x19\x90\x39\xf4\xc1\xe2\xf8\x89\x65\x8f\xb7\x76\xd6\xa8\x18\x66\xf5\x29\x22\xf8\xfc\xe5\xd9\x2f\xb9\xe6\xc0\x1b\xa7\x22\xb4\x3d\xc0\x6b\xc0\x72\x7d\x0d\xd6\x32\x48\x13\x4a\x0c\xda\x5d\x55\x35\xdc\x01\xdb\x28\xac\xa7\xfc\x79\x85\x3e\x7c\xf5\xc3\x88\x30\xe1\x1d\x78\x6e\x76\x73\xdc\x86\x3f\x66\x82\x7a\xae\x9f\x9b\xb8\x8d\x86\x5f\xbb\xf3\xd5\xbf\x98\x24\x65\x6c\xcc\x60\x5c\x0b\xe0\xce\x9f\x75\x7c\x60\xcd\xa0\x0f\x07\xb9\xfd\xb3\x3d\xe6\x6c\x0c\x5e\x66\xee\x33\xed\x39\xdd\x62\x12\x70\x1a\xfb\x9d\x00\x28\x34\xa9\x12\xb9\x27\x7f\x46\xb8\xb7\xd7\xcb\xea\x5e\xdd\x6a\xcf\xc9\xed\xd7\x1c\x09\x8d\xb7\xc7\x24\x9b\x6e\x6a\xbe\x43\x29\xb4\xe4\xe8\x73\x39\xf1\xf2\xec\x56\xb5\x5f\x7d\x24\x61\xe4\x15\x64\x69\x6e\x0a\xec\x4d\xb5\x21\x66\xeb\xd0\x36\x37\x5f\xfd\x62\xce\xd7\x05\x5a\x13\x32\xd3\x7c\x24\xba\x9b\xa6\xc2\x41\x6e\xf3\x92\x93\x44\x23\xad\xb8\x99\x11\xde\x04\xb6\x23\xb9\xc1\xa3\x9c\xc5\xd0\x07\x81\x73\x38\x27\x06\xbd\x76\xe3\xd9\xa3\x60\xdb\xd0\x5a\x29\x69\x79\xbe\xb4\x77\xad\x5b\x0d\xa7\x09\x2e\xe6\x2e\xdd\x2e\x58\x5f\xc1\x61\xbb\xdd\xf6\xdb\x8d\x26\xb8\x86\xc5\x68\xa5\x45\x68\xf6\x16\x0d\x0d\x89\x13\xfd\x99\x7d\x81\x16\x78\x9b\xbb\xf6\xc8\xee\x69\x34\xb2\xad\x8d\xd5\x9d\xaa\x6e\x18\xef\x27\xa9\x8e\x3c\x25\xe7\xdb\x95\x5f\xd5\x05\x95\xda\x57\x34\x1b\x69\xf5\x66\xad\x2f\x63\xe5\xe2\x51\x45\xe6\x59\x03\xad\xdf\xbb\x03\xcf\xfd\xff\x2c\x12\xb7\xe1\x63\x9c\x98\x45\x8d\x03\x9b\x6b\x5e\x64\xb3\x6c\xc2\x39\x54\x2d\xfb\x96\x0b\xdd\xf2\x58\xcd\xaa\x2e\xcf\xb0\xab\x43\x62\x0c\xaa\x84\x4b\xe3\xd6\xf4\xb7\xdd\x22\xb1\x35\xe9\xa2\x5b\xd6\xa1\xa6\x08\x25\x97\xca\x6e\x59\x24\xe8\x36\x21\x08\xec\xb7\xba\x42\x98\x33\xce\x61\x84\x60\xe6\x12\x38\x13\xa8\x61\xce\x4c\x04\x94\x8d\xc7\xa8\xec\x23\x9e\x6d\xd4\x20\x85\xdd\x90\xc7\x5a\xc5\x9d\xa4\x8c\x62\x77\x9b\x54\xb7\x5d\x58\x66\x9c\xed\xc2\xd2\x36\xe4\x2e\xb8\x03\xe4\xc4\xb0\x19\x42\xd6\x54\x87\x4c\x84\x08\x59\x53\x05\x4f\x63\x28\x15\xd5\x0d\xb7\x09\x09\xa1\x94\x89\x49\x17\x3a\x27\xab\xca\xea\xa8\xbd\x6a\xd6\x3d\x2c\x4a\x0f\xee\x20\xff\xac\x2c\xa0\x33\x38\xb1\x05\x77\x17\x40\x47\x72\xfe\x4a\x31\xfa\xce\x1e\xba\x0b\xee\xed\xc2\xad\x51\xa7\x66\x9e\xf0\x74\xc2\x84\xee\xc2\xe7\x3a\x48\x59\x5d\x92\x30\xbf\xb0\xf2\x27\x68\x3c\xd7\x48\xc9\x0d\x4b\xdc\x86\xd7\xa8\xee\xf9\x52\xa5\xa4\xaf\xd0\x8e\x04\x57\xb2\xa4\xd4\x5d\x96\x56\x68\x58\x92\xf4\xc0\x73\x8a\x06\xee\x34\xfc\x90\xb3\xf0\xdb\xce\x47\x64\x9b\xe3\x1b\x71\x0d\x74\x13\x4f\x15\xdf\x46\x94\x7f\x5c\xbb\xfb\x3d\x64\x5d\x1f\x79\xde\xf4\x4d\xc4\xf4\x7d\x2d\xd1\x1a\x6d\xb7\xfa\x8a\x69\xf6\x1c\x58\x93\x31\x53\xda\x76\xde\xbd\xaf\xc2\x41\xe5\x05\xcb\xfb\xde\xee\xe8\x72\xdb\x2c\x2c\x3f\x51\x32\xf1\xdc\x02\xd1\x6d\x82\x51\x29\x6e\x35\x8c\xea\x72\x05\xc8\x35\xfe\xfd\x6e\xc7\x84\xeb\xbd\x7e\x7f\xb2\x7a\x6b\xb0\xea\x94\xd4\x0b\xf2\x19\xba\x17\xe4\xff\x43\xfa\xdf\x00\x00\x00\xff\xff\x23\x0a\xdc\x1e\x29\x15\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 5417, mode: os.FileMode(420), modTime: time.Unix(1476816335, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/main.html": assetsMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

