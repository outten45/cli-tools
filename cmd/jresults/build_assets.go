// Code generated by go-bindata.
// sources:
// assets/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\xff\x73\xda\x38\x16\xff\x7d\xff\x8a\x77\xbe\xec\xd8\xde\x03\x9b\x84\x24\x6d\x28\x64\xa6\x97\x76\xdb\xa6\xdd\xa6\x07\xd9\x74\xb3\x9d\x4e\x47\x58\x0f\x2c\x2a\x4b\x3e\x49\x86\x70\x0c\xff\xfb\x8d\x6c\x83\x6d\x42\xd8\xb9\xdb\x9b\xcb\x0f\x1d\xeb\xbd\x8f\xde\xf7\x2f\xa2\xfd\xd8\x24\xfc\xf2\x07\x80\x7e\x8c\x84\xda\x0f\x80\xfe\x5f\xda\x6d\xf8\x40\x0c\x6a\x03\x91\x4c\x52\xc6\x91\x02\x11\x14\x12\x26\xd8\x84\x21\x85\xab\xd1\x08\xda\xed\x12\xcd\x99\xf8\x0e\x0a\xf9\xc0\xd1\x66\xc9\x51\xc7\x88\xc6\x81\x58\xe1\x64\xe0\xc4\xc6\xa4\xba\x17\x86\x09\x79\x88\xa8\x08\xc6\x52\x1a\x6d\x14\x49\xed\x21\x92\x49\xb8\x25\x84\xdd\xa0\x1b\x3c\x0b\x23\xad\x2b\x5a\x90\x30\x11\x44\x5a\x3b\xc0\x84\xc1\xa9\x62\x66\x39\x70\x74\x4c\xba\xcf\x4f\xdb\x7f\xbf\xbb\x67\x6c\xf4\xee\x67\x7c\x7f\x4c\xdf\x24\xd7\xc3\x97\xdf\x97\x51\xf6\xf6\xe5\xdb\xe1\xb4\x7b\x72\x93\xfc\x1a\x2d\x16\xcf\xa4\xe8\x0e\xef\xe9\xf4\xf4\x8e\xfc\xed\x53\x32\xba\xd5\xff\x0a\xdf\x9f\x3f\x9f\x8f\xe9\xeb\x59\x7c\x9a\x39\x10\x29\xa9\xb5\x54\x6c\xca\xc4\xc0\x21\x42\x8a\x65\x22\x33\xed\xd4\x42\x70\x93\x1a\x26\x05\xe1\x60\x62\x4c\xf0\xff\xe0\x70\x3b\x57\x74\xc8\x6d\xf5\x76\x29\x3f\x1e\xb3\xa1\xbe\xfb\xed\xee\x54\xbc\xea\x5c\x67\x86\x8b\x37\x44\xf3\xab\xeb\xec\xea\x59\xb6\x98\xd1\xec\xf3\xc5\xe8\x4e\x7d\x98\x0f\xef\xa5\xfc\x94\x9e\x8c\x3f\xdf\x4f\x93\xe9\xf5\x3f\xde\xfd\xb6\xe0\xe1\x28\xfd\x23\xb7\xf7\xbb\x66\x96\x29\x0e\x1c\x83\x0f\x26\xcc\xed\x2a\x5c\x0d\x43\xeb\xd4\x4c\x53\xe4\x6c\xae\x02\x81\x26\x34\x24\x8b\x62\xa2\x8c\x0e\x79\x5e\x3e\x96\x70\x95\x13\xb6\x4e\xe5\xb5\x16\x6e\x8a\xad\x3f\x96\x74\x09\x11\x27\x5a\x0f\x9c\x48\x0a\x43\x98\x40\xb5\xb1\x26\x3e\xbe\xbc\xfe\x05\x0d\x2a\x50\xa8\x33\x6e\x34\x4c\x94\x4c\x60\xb5\x82\x60\x64\x88\x32\xb7\x2c\xc1\xe0\x67\xa9\x12\x62\xc0\xb9\x26\x02\x3a\x27\x2d\x38\xe9\x74\xce\xe1\xf8\xac\xd7\x39\xed\x75\xce\xe0\xf5\xe8\xd6\x81\xf5\xba\x1f\xc6\xc7\xa5\x50\x43\xc6\x1c\x37\x2a\x8b\x43\xfe\x6f\x5b\x1b\xc5\x52\xa4\xe5\x69\x2c\x15\x45\xb5\x3d\xc6\x72\x8e\xaa\xfc\x8e\xa4\xa0\x28\xf4\x96\xa7\x50\xa7\x52\x68\x36\xc7\xd2\x70\xab\xa5\x6a\xa7\xe2\xac\xaa\x43\xce\xbe\xec\x33\x91\x66\xa6\x8c\x6d\x14\x63\xf4\x7d\x2c\x1f\x1c\x60\xb4\x3c\xbd\xe4\xdc\x81\x39\xe1\xd9\x86\x0d\xc4\x52\xf2\x4f\xa4\x97\xfd\xd0\xc4\xbb\x22\x3f\x90\x31\xf2\x7d\x8c\x11\x49\x52\x8e\x7a\x1f\xeb\x17\x24\x62\xef\x15\x43\x04\x25\x8a\xc2\x2b\x9c\x33\x62\x1b\x61\xff\x6d\xca\xf6\xdf\xbf\x38\x83\x4f\xa8\x22\x14\x86\x71\xdc\x07\xf8\x11\x5e\x2b\x25\x15\x78\x57\x32\x13\xc6\x6f\x42\xfa\x61\x15\x30\xcb\xa9\x05\xb3\x6f\x6c\xcd\x54\xd0\xd5\x0a\x14\x11\x53\xcc\x6b\xc2\x0c\xcb\x42\x59\xaf\x9f\x8e\x3d\x3d\x14\x7b\x5b\x5c\x79\x1c\x01\xd6\xeb\x6d\x02\x2a\xaa\x25\x96\xc5\xc3\x2d\x41\x37\x52\x42\x77\x35\xad\x56\xed\xea\xe6\x93\x80\x32\x3f\x87\x20\x36\x4f\x07\x45\x94\xf9\xda\xa6\xeb\xb0\x30\x9b\xb6\x43\x88\x32\x77\x17\x67\x07\x40\xa9\x62\xc2\x4c\xc0\xf9\xf1\x3c\x38\x9e\x38\x10\xe4\xf9\x2c\x2f\xc2\x7a\x0d\x9e\x8d\x5a\x4e\xb4\x9e\xf9\x4d\x31\xf5\x0c\xe7\x49\x44\x41\xa1\x4a\x5b\x3f\xac\xa5\xb9\x1f\xe6\x8d\x56\x1e\x28\x9b\x97\x5d\x42\x94\x71\x2e\xfb\x21\x65\xf3\x92\xa5\x23\xc5\x52\x03\x5a\x45\xd5\x24\x7e\x34\xa4\x68\x77\xb6\x9d\x4f\xb4\x9b\x0f\xa6\x59\x9e\x45\xa2\x34\x9a\x81\x93\x99\x49\xfb\xb9\x95\x5b\x48\xfb\x4f\x44\x67\x82\xa2\xd2\x91\x54\x58\xa9\xa8\x68\xed\x8d\xaa\xda\x3c\x9d\x91\x39\x29\x44\xff\x77\x1a\xff\x60\xe2\xfe\x49\x6d\x92\x62\x30\xfb\x67\x86\x6a\x99\x2f\xaf\xe2\xb3\xdd\x0d\x8e\x83\x4e\xa0\x39\x4b\x36\x3a\xca\xa4\x35\xf7\xd5\xc9\xd9\x79\x3b\x1a\xa6\x9f\x67\x72\x74\xb3\x38\x7b\x1f\x2d\xdf\xdd\x90\xdf\x3f\xca\x53\x76\x3e\xf9\xfd\xc2\xbc\xff\x14\xdf\xdf\x8f\xcf\xd9\xd9\xed\xc5\x70\x74\x77\xfd\xe6\xf9\x60\x23\xe5\xa9\x0d\xb5\xdf\xe0\x27\xbc\x2b\x64\xcd\x89\x82\x99\x96\xe2\x15\x31\x04\x06\x9b\xc5\xb1\x19\x12\xd7\xa3\x9b\x8f\xb0\x5e\xbf\xa8\xb0\x7a\xb3\x55\x2a\x70\xb9\x65\x7e\x15\xec\xa1\x89\xa5\xc4\x90\x21\x59\xc0\x00\xac\x9c\x20\xb5\xd5\xe3\x6d\x94\xf9\x35\x60\x9e\x9f\xd2\x82\x2f\x5f\x5f\xfc\x50\x70\x8e\xbc\x49\x26\x22\xdb\xa8\x9e\x0f\xab\x4d\x23\x6c\x68\x90\xa5\x94\x18\xb4\xb7\xea\x6c\x78\x24\x6c\xcb\xb0\x9a\x8a\x81\x04\x03\xf8\x16\x44\x31\x61\xc2\x3b\xf2\xdc\xbc\x73\x5c\x3f\x98\x30\x41\x3d\x37\x28\x20\xae\xef\x07\xb5\x86\x6e\xfe\x25\x24\xad\x6c\x63\x06\x93\x86\x01\x8f\xfe\xac\xe2\x23\x0b\x83\x01\x1c\x15\xf8\x17\x07\xe0\x6c\x02\x5e\x0e\x0f\x98\xf6\x9c\x5e\x39\x3b\x1d\xff\xb0\x12\x00\x85\x26\x53\xa2\xd0\x14\xcc\x09\xf7\x0e\x6a\x59\x3f\xc9\x5b\x1f\xf0\xdc\x3e\x76\x49\x64\xbc\x03\x90\x7c\x1f\x34\x74\x47\x52\x68\xc9\x31\xe0\x72\xea\x15\xd1\xad\x73\xbf\x05\x48\xa2\xd8\x2b\x8b\xa5\xb5\x4d\xb0\x37\xd3\x86\x98\x1d\xa7\x6d\x6c\xbe\x05\xe5\x33\x48\x97\xd2\x5a\x90\x43\x8b\x25\xf2\x38\x4c\xa5\x82\x02\xf3\x9a\x93\x54\x23\xad\xa9\x99\x13\xde\x02\xb6\x27\xb8\xe1\x4f\x45\x15\xc3\x00\x04\x2e\xe0\x15\x31\xe8\x75\xfc\x17\x3f\x85\xbb\x40\x8b\x52\xd2\xd6\xf9\xca\xf6\x5a\xaf\x6e\x4e\x0b\x5c\x2c\x54\xba\x3d\xb0\xba\xc2\xe3\x4e\xa7\x13\x74\xfc\x16\xb8\x86\x25\x68\xa9\xa5\x69\xb6\x8b\x46\x86\x24\xa9\xfe\xc2\xbe\x42\x1b\xbc\x6d\xaf\xfd\x64\xef\xf8\x7e\x7e\xd5\x5f\x3f\xca\xea\xb6\xe2\x83\x34\xd3\xb1\xa7\xe4\x62\x37\xf3\xeb\x26\xa1\x96\xfb\x1a\x67\x4b\xad\x77\xd6\xa6\x19\x6b\x8d\x47\x15\x59\xe4\x03\xb4\xd9\x77\x47\x9e\xfb\xd7\xdc\x12\xd7\x0f\x30\x49\xcd\xb2\x51\x03\xdb\x36\x2f\xa3\x59\x0d\xe1\x42\x54\x23\xfa\xb6\x16\x7a\x95\x5b\xad\x3a\xaf\x88\xb0\xab\x23\x62\x0c\xaa\x94\x4b\xe3\x36\xf8\x0f\xbd\x32\xb0\x0d\xea\xb2\x57\xe5\xa1\xc1\x88\x24\x97\xca\x5e\x59\xa6\xe8\xb6\x20\x0c\xed\x4f\x19\x85\xb0\x60\x9c\xc3\x18\xc1\x2c\x24\x70\x26\x50\xc3\x82\x99\x18\x28\x9b\x4c\x50\xd9\xed\x9d\x5f\xd4\x20\x85\xbd\x50\xd8\x5a\x97\x3b\xcd\x18\xc5\xde\x6e\x51\x3d\xf4\x60\x95\xd7\x6c\x0f\x56\x76\x20\xf7\xc0\x1d\x22\x27\x86\xcd\x11\xf2\xa1\x3a\x62\x22\x42\xc8\x87\x2a\x78\x1a\x23\xa9\xa8\xf6\xdd\x16\xa4\x84\x52\x26\xa6\x3d\xe8\x9e\xad\x6b\xa7\x93\xce\xba\xd5\xd4\xb0\xac\x34\xb8\xc3\xe2\xd5\x5d\x8a\xce\xc5\x89\x1d\x71\x8f\x05\xe8\x58\x2e\xde\x28\x46\x3f\x58\xa7\x7b\xe0\x3e\x2c\xdd\x46\xe9\x34\xe0\x29\xcf\xa6\x4c\xe8\x1e\x7c\x69\x0a\xa9\xb2\x4b\x52\x16\x94\xa8\x60\x8a\xc6\x73\x8d\x94\xdc\xb0\xd4\xf5\x3d\xbf\x7e\xe7\x6b\xbd\x24\x03\x85\xf6\x49\x70\x2b\xab\x92\x7a\x5c\xa5\xb5\x32\xac\x8a\xf4\xc8\x73\xca\x01\xee\xf8\x41\xc4\x59\xf4\x7d\xef\x12\xd9\xad\xf1\x2d\xb9\x21\x74\x6b\x4f\x5d\xbe\xb5\xa8\xf8\xed\xe1\x1e\xd6\x90\x4f\x7d\xe4\xc5\xd0\x37\x31\xd3\x4f\x8d\x44\x0b\xda\x1d\xf5\x35\x68\xbe\x0e\x2c\x64\xc2\x94\xb6\x93\xf7\xe0\x56\x38\xaa\x6d\xb0\x62\xee\xed\xb7\xae\xc0\xe6\x66\x05\xa9\x92\xa9\xe7\x96\x12\xdd\x16\x18\x95\xe1\xce\xc0\xa8\x1f\xd7\x80\x5c\xe3\xff\x5e\xed\x84\x70\x7d\x50\xef\x9f\xcc\xde\x46\x58\xfd\x95\xd4\x0f\x8b\x37\x74\x3f\x2c\xfe\x97\xe7\xdf\x01\x00\x00\xff\xff\x19\x58\x79\xfe\xed\x11\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 4589, mode: os.FileMode(420), modTime: time.Unix(1473818281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/main.html": assetsMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

