// Code generated by go-bindata.
// sources:
// assets/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x94\x4f\x73\xd3\x3c\x10\xc6\xef\xef\xa7\xd0\xeb\x2b\x63\x8b\x36\x29\x6d\x19\xa5\x33\xa5\x85\xb6\x69\xa1\x21\x86\xb4\x39\xca\xd6\xd6\x56\xab\x3f\x1e\xed\x3a\x21\x64\xf2\xdd\x19\x27\x26\x09\x10\x72\xc4\x07\x8f\x9e\xdd\x67\x25\xef\xcf\x3b\x12\x25\x59\x73\xf6\x1f\x63\xa2\x04\xa9\x9a\x05\x63\xe2\xff\x38\x66\x77\x92\x00\x89\xe5\xde\x56\xda\x80\x62\xd2\x29\x66\xb5\xd3\x4f\x1a\x14\xbb\x48\x53\x16\xc7\xad\xdb\x68\xf7\xc2\x02\x98\x5e\x84\x34\x33\x80\x25\x00\x45\xac\x0c\xf0\xd4\x8b\x4a\xa2\x0a\xdf\x72\x6e\xe5\xb7\x5c\xb9\x24\xf3\x9e\x90\x82\xac\x1a\x91\x7b\xcb\xd7\x01\xde\x49\x3a\xc9\x31\xcf\x11\x37\xb1\xc4\x6a\x97\xe4\x88\x11\xd3\x8e\xa0\x08\x9a\x66\xbd\x08\x4b\xd9\x39\xe9\xc6\xef\x46\x63\xad\xd3\x9b\x0f\x70\x7b\xa0\xae\x6c\x7f\x78\xfe\x32\xcb\xeb\xeb\xf3\xeb\x61\xd1\x39\xbc\xb7\x5f\xf3\xe9\xf4\xd8\xbb\xce\x70\xac\x8a\xee\x48\xbe\x1a\xd8\xf4\x0b\x7e\xe7\xb7\x6f\x4e\x26\x99\x7a\xff\x5c\x76\xeb\x88\xe5\xc1\x23\xfa\xa0\x0b\xed\x7a\x91\x74\xde\xcd\xac\xaf\x31\xda\x42\x70\x5f\x91\xf6\x4e\x1a\x46\x25\x58\xf8\x07\x0d\xc7\xcb\x83\xf6\xb5\x1d\xae\x67\xfe\xd3\x81\x1e\xe2\xe8\x71\xd4\x75\x97\xaf\xfb\x35\x19\x77\x25\xd1\x5c\xf4\xeb\x8b\xe3\x7a\xfa\xac\xea\x87\xd3\x74\x14\xee\x26\xc3\xb1\xf7\x83\xea\x30\x7b\x18\x17\xb6\xe8\x7f\xbe\x79\x9c\x1a\x9e\x56\x7b\xdb\x16\xfc\xe7\x0c\x88\xcc\xab\x59\xdb\x2d\xc9\xcc\x00\xcb\x8d\x44\xec\x45\x2b\xb1\x7c\xc7\x48\x41\x57\xa0\x5a\x95\xf9\xa0\x20\xac\x65\xe9\x27\x10\xda\x75\xee\x9d\x02\x87\xeb\x5c\x00\xac\xbc\x43\x3d\x81\x96\x76\x73\xca\x66\xfc\x56\x3a\x6c\xc4\x32\x7d\x76\x27\x33\x30\x82\x53\xf9\x7b\x22\x95\xb6\x32\x80\xbb\x52\x1f\x41\xba\x9d\x25\x24\x9d\x92\x41\xb1\x4b\x98\x68\xd9\xfc\xe5\xdd\xd5\x4a\xef\xae\x3f\x3d\x62\x03\x08\x39\x38\xd2\x06\x7e\x35\x08\xbe\xf9\xf4\x26\xb3\xd5\x96\xa0\x0d\xd6\xe6\x99\xcf\x59\x90\xae\x00\x96\xa4\x24\x69\x08\x58\x1b\x42\xb6\x58\xfc\x9d\x82\x3a\x9b\xcf\x63\x96\x2c\x51\xb0\xc5\x42\x70\x52\x3b\x0d\x2d\x92\x7d\x96\x06\xcd\xde\x2d\x5a\x44\x6b\x42\xfb\x37\x6b\x48\xed\x73\xb4\xb8\x4e\x8f\xfe\x30\x6d\x03\x5b\x32\x01\xa7\xd8\x86\x82\xe0\x5b\xd4\x04\x5f\x4e\xd0\x6a\x58\x57\x61\xc1\x57\x37\xd8\x8f\x00\x00\x00\xff\xff\xcf\x49\x4b\x68\xc9\x04\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 1225, mode: os.FileMode(420), modTime: time.Unix(1473599803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/main.html": assetsMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

