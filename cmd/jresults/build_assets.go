// Code generated by go-bindata.
// sources:
// assets/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\xe1\x72\xdb\xb8\x11\xfe\x7f\x4f\xb1\x65\xdd\x21\x95\x4a\xa4\x6c\xd9\x4e\xcc\x48\x9e\x49\x93\x5c\x12\x27\x17\xa7\x92\xcf\x39\x5f\x26\x93\x81\x88\x95\x08\x05\x04\x58\x00\x94\xac\x6a\xf4\xee\x1d\x90\x94\x48\xca\xb2\x6e\xda\x74\xce\x3f\x32\xc4\xee\x87\xdd\xc5\xee\xb7\x0b\x28\xfd\xd8\x24\xfc\xf2\x27\x80\x7e\x8c\x84\xda\x0f\x80\xfe\x5f\x3a\x1d\xf8\x40\x0c\x6a\x03\x91\x4c\x52\xc6\x91\x02\x11\x14\x12\x26\xd8\x84\x21\x85\x97\xa3\x11\x74\x3a\x25\x9a\x33\xf1\x1d\x14\xf2\x81\xa3\xcd\x92\xa3\x8e\x11\x8d\x03\xb1\xc2\xc9\xc0\x89\x8d\x49\x75\x18\x04\x09\xb9\x8f\xa8\xf0\xc7\x52\x1a\x6d\x14\x49\xed\x22\x92\x49\xb0\x15\x04\x3d\xbf\xe7\x3f\x0d\x22\xad\x2b\x99\x9f\x30\xe1\x47\x5a\x3b\xc0\x84\xc1\xa9\x62\x66\x39\x70\x74\x4c\x7a\xcf\x4e\x3b\xff\xb8\xbd\x63\x6c\xf4\xee\x67\x7c\x7f\x4c\xdf\x24\x57\xc3\x17\xdf\x97\x51\xf6\xf6\xc5\xdb\xe1\xb4\x77\x72\x9d\xfc\x1a\x2d\x16\x4f\xa5\xe8\x0d\xef\xe8\xf4\xf4\x96\xfc\xfd\x53\x32\xba\xd1\xff\x0e\xde\x9f\x3f\x9b\x8f\xe9\xeb\x59\x7c\x9a\x39\x10\x29\xa9\xb5\x54\x6c\xca\xc4\xc0\x21\x42\x8a\x65\x22\x33\xed\xd4\x52\x70\x9d\x1a\x26\x05\xe1\x60\x62\x4c\xf0\x4f\x38\x70\x27\x77\x74\xe8\xd8\xea\xed\x52\x7e\x3c\x66\x43\x7d\xfb\xdb\xed\xa9\x78\xd5\xbd\xca\x0c\x17\x6f\x88\xe6\x2f\xaf\xb2\x97\x4f\xb3\xc5\x8c\x66\x9f\x2f\x46\xb7\xea\xc3\x7c\x78\x27\xe5\xa7\xf4\x64\xfc\xf9\x6e\x9a\x4c\xaf\xfe\xf9\xee\xb7\x05\x0f\x46\xe9\x1f\x1d\x7b\xff\xd1\xcc\x32\xc5\x81\x63\xf0\xde\x04\x79\x5c\xc5\x51\x83\xc0\x1e\x6a\xa6\x29\x72\x36\x57\xbe\x40\x13\x18\x92\x45\x31\x51\x46\x07\x3c\xa7\x8f\x15\xbc\xcc\x05\xdb\x43\xe5\x5c\x0b\x36\x64\xeb\x8f\x25\x5d\x42\xc4\x89\xd6\x03\x27\x92\xc2\x10\x26\x50\x6d\xa2\x89\x8f\x2f\xaf\x7e\x41\x83\x0a\x14\xea\x8c\x1b\x0d\x13\x25\x13\x58\xad\xc0\x1f\x19\xa2\xcc\x0d\x4b\xd0\xff\x59\xaa\x84\x18\x70\xae\x88\x80\xee\x49\x1b\x4e\xba\xdd\x73\x38\x3e\x0b\xbb\xa7\x61\xf7\x0c\x5e\x8f\x6e\x1c\x58\xaf\xfb\x41\x7c\x5c\x1a\x35\x64\xcc\x71\xe3\xb2\x58\xe4\xff\x76\xb4\x51\x2c\x45\x5a\xae\xc6\x52\x51\x54\xdb\x65\x2c\xe7\xa8\xca\xef\x48\x0a\x8a\x42\x6f\x75\x0a\x75\x2a\x85\x66\x73\x2c\x03\xb7\x5e\xaa\x76\x2a\xd6\xaa\x5a\xe4\xea\xcb\x3e\x13\x69\x66\xca\xdc\x46\x31\x46\xdf\xc7\xf2\xde\x01\x46\xcb\xd5\x0b\xce\x1d\x98\x13\x9e\x6d\xd4\x40\xac\x24\xff\x44\x7a\xd9\x0f\x4c\xbc\x6b\xf2\x03\x19\x23\xdf\xa7\x18\x91\x24\xe5\xa8\xf7\xa9\x7e\x41\x22\xf6\x6e\x31\x44\x50\xa2\x28\xbc\xc2\x39\x23\xb6\x11\xf6\xef\xa6\x6c\xff\xfe\x8b\x33\xf8\x84\x2a\x42\x61\x18\xc7\x7d\x80\xbf\xc1\x6b\xa5\xa4\x6a\xaa\xfa\x41\x95\x28\xab\xa9\x25\xb1\x6f\x2c\x57\x2a\xe8\x6a\x05\x8a\x88\x29\xe6\x5c\x30\xc3\x92\x20\xeb\xf5\xe3\x39\xa7\x87\x72\x6e\x49\x95\xe7\x0f\x60\xbd\xde\x26\xbe\x92\x5a\x61\x49\x1a\x6e\x05\xba\x51\x0a\xba\xeb\x69\xb5\xea\x54\x3b\x1f\x05\x94\x75\x39\x04\xb1\xf5\x39\x68\xa2\xac\xd3\xb6\x4c\x87\x8d\xd9\x72\x1d\x42\x94\x35\xbb\x38\x3b\x04\xca\x0b\x57\x22\x1f\xe0\xea\x25\xcc\xab\x84\x82\x42\x55\x97\x7e\x50\xab\x63\x3f\xc8\x3b\xa8\x5c\x50\x36\x2f\xe9\x4f\x94\x71\x2e\xfb\x01\x65\xf3\x52\xa5\x23\xc5\x52\x03\x5a\x45\xd5\x88\x7d\x30\x7d\x68\x6f\xb6\x1d\x3c\xb4\x97\x4f\x9c\x59\x5e\x26\xa2\x34\x9a\x81\x93\x99\x49\xe7\x99\xb5\x5b\x58\xfb\x6f\x4c\x67\x82\xa2\xd2\x91\x54\x58\xb9\xa8\x64\x9d\x8d\xab\xda\xa0\x9c\x91\x39\x29\x4c\xff\x6f\x1e\xff\x60\x94\xfe\xa0\x37\x49\xd1\x9f\xfd\x2b\x43\xb5\xcc\x6f\xa5\xe2\xb3\xd3\xf3\x8f\xfd\xae\xaf\x39\x4b\x36\x3e\xca\xa2\x35\x2f\xa2\x93\xb3\xf3\x4e\x34\x4c\x3f\xcf\xe4\xe8\x7a\x71\xf6\x3e\x5a\xbe\xbb\x26\xbf\x7f\x94\xa7\xec\x7c\xf2\xfb\x85\x79\xff\x29\xbe\xbb\x1b\x9f\xb3\xb3\x9b\x8b\xe1\xe8\xf6\xea\xcd\xb3\xc1\xc6\xca\x63\x57\xcf\xfe\x80\x1f\x39\x5d\x61\x6b\x4e\x14\xcc\xb4\x14\xaf\x88\x21\x30\xd8\xdc\x08\x9b\x29\x70\x35\xba\xfe\x08\xeb\xf5\xf3\x0a\xab\x37\xd7\x45\x05\x2e\xaf\x8f\x5f\x05\xbb\x6f\x62\x29\x31\x64\x48\x16\x30\x00\x6b\xc7\x4f\x2d\x7b\xbc\x8d\xb3\x56\x0d\x98\xd7\xa7\x8c\xe0\xcb\xd7\xe7\x3f\x15\x9a\x23\x6f\x92\x89\xc8\x76\xa2\xd7\x82\xd5\xa6\x11\x36\x32\xc8\x52\x4a\x0c\xda\x5d\x75\x35\x3c\x30\xb6\x55\x58\x4f\xc5\xc4\x81\x01\x7c\xf3\xa3\x98\x30\xe1\x1d\x79\x6e\xde\x39\x6e\xcb\x9f\x30\x41\x3d\xd7\x2f\x20\x6e\xab\xe5\xd7\x3a\xb6\xf9\x97\x90\xb4\x8a\x8d\x19\x4c\x1a\x01\x3c\xf8\xb3\x8e\x8f\x2c\x0c\x06\x70\x54\xe0\x9f\x1f\x80\xb3\x09\x78\x39\xdc\x67\xda\x73\xc2\x72\x38\x3a\xad\xc3\x4e\x00\x14\x9a\x4c\x89\xc2\x93\x3f\x27\xdc\x3b\xe8\x65\xfd\xa8\x6e\x7d\xe0\xe4\xf6\x15\x4b\x22\xe3\x1d\x80\xe4\x03\xbf\xe1\x3b\x92\x42\x4b\x8e\x3e\x97\x53\xaf\xc8\x6e\x5d\xfb\xcd\x47\x12\xc5\x5e\x49\x96\xf6\xb6\xc0\xde\x4c\x1b\x62\x76\x0e\x6d\x73\xf3\xcd\x2f\xdf\x37\xba\xb4\xd6\x86\x1c\x5a\xdc\x12\x0f\xd3\x54\x3a\x28\x30\xaf\x39\x49\x35\xd2\x9a\x9b\x39\xe1\x6d\x60\x7b\x92\x1b\x3c\x29\x58\x0c\x03\x10\xb8\x80\x57\xc4\xa0\xd7\x6d\x3d\x7f\x12\xec\x02\x2d\x4a\x49\xcb\xf3\x95\xed\xb5\xb0\x1e\x4e\x1b\x5c\x2c\x5c\xba\x21\x58\x5f\xc1\x71\xb7\xdb\xf5\xbb\xad\x36\xb8\x86\x25\x68\xa5\x65\x68\xb6\x8b\x46\x86\x24\xa9\xfe\xc2\xbe\x42\x07\xbc\x6d\xaf\x3d\xb1\x7b\x5a\xad\x7c\x6b\x6b\xfd\xa0\xaa\x5b\xc6\xfb\x69\xa6\x63\x4f\xc9\xc5\x6e\xe5\xd7\x4d\x41\xad\xf6\x35\xcd\x56\x5a\xef\xac\x4d\x33\xd6\x1a\x8f\x2a\xb2\xc8\x07\x68\xb3\xef\x8e\x3c\xf7\xaf\x79\x24\x6e\xcb\xc7\x24\x35\xcb\x06\x07\xb6\x6d\x5e\x66\xb3\x1a\xc2\x85\xa9\x46\xf6\x2d\x17\xc2\xea\x58\xed\xba\xae\xc8\xb0\xab\x23\x62\x0c\xaa\x94\x4b\xe3\x36\xf4\xf7\x61\x99\xd8\x86\x74\x19\x56\x75\x68\x28\x22\xc9\xa5\xb2\x5b\x96\x29\xba\x6d\x08\x02\xfb\x1b\x45\x21\x2c\x18\xe7\x30\x46\x30\x0b\x09\x9c\x09\xd4\xb0\x60\x26\x06\xca\x26\x13\x54\xf6\xb6\xce\x37\x6a\x90\xc2\x6e\x28\x62\xad\xdb\x9d\x66\x8c\x62\xb8\x4b\xaa\xfb\x10\x56\x39\x67\x43\x58\xd9\x81\x1c\x82\x3b\x44\x4e\x0c\x9b\x23\xe4\x43\x75\xc4\x44\x84\x90\x0f\x55\xf0\x34\x46\x52\x51\xdd\x72\xdb\x90\x12\x4a\x99\x98\x86\xd0\x3b\x5b\xd7\x56\x27\xdd\x75\xbb\xe9\x61\x59\x79\x70\x87\xc5\x73\xba\x34\x9d\x9b\x13\x3b\xe6\x1e\x1a\xd0\xb1\x5c\xbc\x51\x8c\x7e\xb0\x87\x0e\xc1\xbd\x5f\xba\x0d\xea\x34\xe0\x29\xcf\xa6\x4c\xe8\x10\xbe\x34\x8d\x54\xd5\x25\x29\xf3\x4b\x94\x3f\x45\xe3\xb9\x46\x4a\x6e\x58\xea\xb6\xbc\x56\x7d\xcf\xd7\x3a\x25\x7d\x85\xf6\x49\x70\x23\x2b\x4a\x3d\x64\x69\x8d\x86\x15\x49\x8f\x3c\xa7\x1c\xe0\x4e\xcb\x8f\x38\x8b\xbe\xef\xbd\x44\x76\x39\xbe\x15\x37\x8c\x6e\xe3\xa9\xdb\xb7\x11\x15\x3f\x2a\xdc\xc3\x1e\xf2\xa9\x8f\xbc\x18\xfa\x26\x66\xfa\xb1\x91\x68\x41\xbb\xa3\xbe\x06\xcd\xaf\x03\x0b\x99\x30\xa5\xed\xe4\x3d\x78\x2b\x1c\xd5\x6e\xb0\x62\xee\xed\x8f\xae\xc0\xe6\x61\xf9\xa9\x92\xa9\xe7\x96\x16\xdd\x36\x18\x95\xe1\xce\xc0\xa8\x2f\xd7\x80\x5c\xe3\xff\xdf\xed\x84\x70\x7d\xd0\xef\x0f\x56\x6f\x63\xac\xfe\x4a\xea\x07\xc5\x1b\xba\x1f\x14\xff\x7d\xf3\x9f\x00\x00\x00\xff\xff\x26\xcb\xf5\x13\xc6\x11\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 4550, mode: os.FileMode(420), modTime: time.Unix(1473647184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/main.html": assetsMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

