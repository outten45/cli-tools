// Code generated by go-bindata.
// sources:
// assets/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\xff\x73\xda\xb8\x12\xff\xfd\xfe\x8a\x7d\x7e\xb9\xb1\xe9\x03\x9b\x84\x90\x36\x14\x32\xd3\x97\xf4\xda\xa6\x5f\xd2\x07\xb9\xf4\x72\x9d\x4e\x47\x58\x0b\x16\x95\x25\x3f\x49\x86\xf0\x18\xfe\xf7\x37\xb2\x0d\xd8\x84\x70\x4d\xef\xe6\xf2\x43\x07\xed\xae\x3e\xbb\xda\xfd\x68\xb5\x6e\x37\x32\x31\x3f\xfb\x09\xa0\x1b\x21\xa1\xf6\x07\x40\xd7\x30\xc3\xf1\xec\xf2\x3d\x1a\x54\xa0\x50\xa7\xdc\x68\x18\x29\x19\xc3\x62\x01\xfe\xc0\x10\x65\xae\x59\x8c\xfe\x2f\x52\xc5\xc4\x80\x73\x49\x04\x34\x8f\xea\x70\xd4\x6c\x9e\xc0\x61\xbb\xd3\x3c\xee\x34\xdb\xf0\x72\x70\xed\xc0\x72\xd9\x0d\x72\xb8\x1c\xfa\x1f\x8d\x06\xbc\x23\x06\xb5\x81\x50\xc6\x09\xe3\x48\x81\x08\x0a\x31\x13\x6c\xc4\x90\xc2\xf9\x60\x00\x8d\x46\x61\xcd\x99\xf8\x06\x0a\x79\xcf\xd1\x66\xce\x51\x47\x88\xc6\x81\x48\xe1\xa8\xe7\x44\xc6\x24\xba\x13\x04\x31\xb9\x0b\xa9\xf0\x87\x52\x1a\x6d\x14\x49\xec\x22\x94\x71\xb0\x16\x04\x2d\xbf\xe5\x3f\x0d\x42\xad\x37\x32\x3f\x66\xc2\x0f\xb5\x76\x80\x09\x83\x63\xc5\xcc\xbc\xe7\xe8\x88\xb4\x9e\x1d\x37\xfe\x7d\x73\xcb\xd8\xe0\xcd\x2f\xf8\xf6\x90\xbe\x8a\x2f\xfb\x2f\xbe\xcd\xc3\xf4\xf5\x8b\xd7\xfd\x71\xeb\xe8\x2a\xfe\x35\x9c\xcd\x9e\x4a\xd1\xea\xdf\xd2\xf1\xf1\x0d\xf9\xd7\xc7\x78\x70\xad\xff\x17\xbc\x3d\x79\x36\x1d\xd2\x97\x93\xe8\x38\x75\x20\x54\x52\x6b\xa9\xd8\x98\x89\x9e\x43\x84\x14\xf3\x58\xa6\xda\x29\xa5\xe0\x2a\x31\x4c\x0a\xc2\xc1\x44\x18\xe3\xdf\x70\xe0\x46\xe6\x68\xdf\xb1\xd5\xeb\xb9\xfc\x70\xc8\xfa\xfa\xe6\xb7\x9b\x63\x71\xd1\xbc\x4c\x0d\x17\xaf\x88\xe6\xe7\x97\xe9\xf9\xd3\x74\x36\xa1\xe9\xa7\xd3\xc1\x8d\x7a\x37\xed\xdf\x4a\xf9\x31\x39\x1a\x7e\xba\x1d\xc7\xe3\xcb\xff\xbc\xf9\x6d\xc6\x83\x41\xf2\x47\xc7\xde\x7d\x34\x33\x4f\xb0\xe7\x18\xbc\x33\x41\x16\x57\x7e\xd4\x20\xb0\x87\x9a\x68\x8a\x9c\x4d\x95\x2f\xd0\x04\x86\xa4\x61\x44\x94\xd1\x01\xcf\xe8\x63\x05\xe7\x99\x60\x7d\xa8\x8c\xc6\xc1\x8a\xc7\xdd\xa1\xa4\x73\x08\x39\xd1\xba\xe7\x84\x52\x18\xc2\x04\xaa\x55\x34\xd1\xe1\x5f\xc7\xef\xe8\x70\x75\x6f\xc8\x90\xe3\xca\x65\xbe\xc8\xfe\x6d\x68\xa3\x58\x82\xb4\x58\x0d\xa5\xa2\xa8\xd6\xcb\x48\x4e\x51\x15\xbf\x43\x29\x28\x0a\xbd\xd6\x29\xd4\x89\x14\x9a\x4d\xb1\x08\xdc\x7a\xd9\xdc\xd4\x7c\xad\x36\x8b\x4c\x7d\xd6\x65\x22\x49\x4d\x91\xdb\x30\xc2\xf0\xdb\x50\xde\x39\xc0\x68\xb1\x7a\xc1\xb9\x03\x53\xc2\xd3\x95\x1a\x88\x95\x64\x3f\x91\x9e\x75\x03\x13\x6d\x43\xbe\x23\x43\xe4\xbb\x14\x03\x12\x27\x1c\xf5\x2e\xd5\x7b\x24\x02\xbc\x58\x63\x58\xdb\xb9\xd3\x50\x1f\x2e\x70\xea\xef\xb1\x79\x8f\x94\xed\x05\x39\x6d\xc3\x47\x54\x21\x0a\xc3\x38\xee\xb1\xfb\x19\x5e\x2a\x25\x15\x78\xe7\x32\x15\x66\xcb\xa4\x1b\x6c\x72\x68\x35\xa5\xfc\x76\x8d\xa5\xd1\xc6\x74\xb1\x00\x45\xc4\x18\x33\x9a\x98\x7e\xc1\x9d\xe5\xf2\xe1\x72\xd0\x7d\xe5\xb0\x7c\xcb\x52\x0b\xb0\x5c\xae\x6b\xb2\x91\x5a\x61\xc1\x27\x6e\x05\xba\x52\x25\xba\xed\x69\xb1\x68\x6c\x76\xee\x30\x58\x73\x13\xef\x4c\x43\xb1\x71\x64\x9c\x7c\x4f\x51\xc5\xc7\xed\x4a\x14\x13\x66\x04\xce\xcf\x27\x7e\x6b\xe4\x80\x9f\xd5\xfb\x4f\x21\x0c\x0c\x11\x94\x28\x7a\x81\x53\x46\x6c\x87\x7c\xe4\x31\x0a\xba\x3c\x6e\x53\xc1\x9f\xd3\xf6\x0f\xc7\x7e\x68\x63\xcf\xf8\x55\x60\xc1\x72\x09\x9e\xad\x62\x26\xb4\x69\xad\x55\x91\xcb\x8c\xcb\x48\x85\x82\x42\x95\x46\x23\x29\x4d\x35\x94\x0a\xb1\x0a\x6a\x6d\xc5\x9b\x93\xfd\x5a\x1a\xc2\x75\x67\xfb\x1e\xec\x4f\x43\xbe\x69\x0f\x13\x1e\x55\xc9\x02\xed\x01\x4a\xfc\x08\xd4\xf7\x70\xe3\xbb\x4e\xf8\x20\x49\xbe\x6b\xf7\x3e\xb6\x3c\x8a\x2f\x05\xde\x4e\xda\x94\x75\x3b\xd8\xb3\xcd\x9f\x6e\x50\x61\x4b\x37\x28\x35\xad\x6e\x90\xbd\x24\xc5\x82\xb2\x69\xf1\x0c\x10\x65\x9c\xb3\x6e\x40\xd9\xb4\x50\xe9\x50\xb1\xc4\x80\x56\xe1\xce\xf7\x97\xb6\x26\x3a\x68\xf9\x6d\xff\xf0\x69\x40\x5b\xd9\x9b\x3b\xc9\xba\x11\x51\x1a\x4d\xcf\x49\xcd\xa8\xf1\xcc\x22\xe6\x38\xdf\x07\x9a\x0a\x8a\x4a\x87\x52\xe1\x64\xfd\xae\x6f\x64\x8d\x95\x93\xd2\x90\x30\x21\x53\x92\x83\x3e\xd6\xd7\x1f\x0c\x10\x3f\xe6\x67\x35\x93\x85\x92\xa2\x3f\xf9\x6f\x8a\x6a\x9e\xcd\x62\xf9\xcf\x46\xcb\x3f\xf4\x9b\xbe\xe6\x2c\x5e\xf9\x28\x4a\x54\x1d\xbf\x8e\xda\x27\x8d\xb0\x9f\x7c\x9a\xc8\xc1\xd5\xac\xfd\x36\x9c\xbf\xb9\x22\xbf\x7f\x90\xc7\xec\x64\xf4\xfb\xa9\x79\xfb\x31\xba\xbd\x1d\x9e\xb0\xf6\xf5\x69\x7f\x70\x73\xf9\xea\x59\x6f\x85\xf2\xd0\xc0\xb5\x3b\xe0\x07\x4e\x97\x63\x4d\x89\x82\x89\x96\xe2\x82\x18\x02\xbd\xd5\x1c\xb4\x7a\xe0\x2e\x07\x57\x1f\x60\xb9\x7c\xbe\xb1\xd5\xab\x21\x69\x63\x5c\x0c\x4d\xbf\x0a\x76\x57\xb5\xa5\xc4\x90\x3e\x99\x41\x0f\x2c\x8e\x9f\x58\xc6\x78\x2b\x67\xb5\x92\x61\x56\x9f\x22\x82\xcf\x5f\x9e\xff\x94\x6b\x0e\xbc\x51\x2a\x42\x7b\xe3\xbd\x1a\x2c\x56\xa4\x5f\xc9\x20\x4d\x28\x31\x68\x77\x95\xd5\x70\x0f\x6c\xad\xb0\x9e\xf2\xc7\x14\x7a\xf0\xd5\x0f\x23\xc2\x84\x77\xe0\xb9\xd9\x3d\x71\x6b\xfe\x88\x09\xea\xb9\x7e\x6e\xe2\xd6\x6a\x7e\xe5\x86\x97\xff\x62\x92\x6c\x62\x63\x06\xe3\x4a\x00\xf7\xfe\xac\xe3\x03\x6b\x06\x3d\x38\xc8\xed\x9f\xef\x31\x67\x23\xf0\x32\x73\x9f\x69\xcf\xe9\x14\xef\xbe\x53\xdb\xef\x04\x40\xa1\x49\x95\xc8\x3d\xf9\x53\xc2\xbd\xbd\x5e\x96\x0f\xea\x96\x7b\x4e\x6e\xbf\xdd\x48\x68\xbc\x3d\x26\xd9\x2c\x53\xf1\x1d\x4a\xa1\x25\x47\x9f\xcb\xb1\x97\x67\xb7\xac\xfd\xea\x23\x09\x23\xaf\x20\x4b\x7d\x5d\x60\x6f\xa2\x0d\x31\x5b\x87\xb6\xb9\xf9\xea\x17\x53\xbd\x2e\xd0\xea\x90\x99\xe6\x03\xd0\xfd\x34\x15\x0e\x72\x9b\x97\x9c\x24\x1a\x69\xc9\xcd\x94\xf0\x3a\xb0\x1d\xc9\x0d\x9e\xe4\x2c\x86\x1e\x08\x9c\xc1\x05\x31\xe8\x35\x6b\xcf\x9f\x04\xdb\x86\xd6\x4a\x49\xcb\xf3\x85\xbd\x6b\x9d\x72\x38\x75\x70\x31\x77\xe9\x76\xc0\xfa\x0a\x0e\x9b\xcd\xa6\xdf\xac\xd5\xc1\x35\x2c\x46\x2b\x2d\x42\xb3\xb7\x68\x60\x48\x9c\xe8\xcf\xec\x0b\x34\xc0\x5b\xdf\xb5\x27\x76\x4f\xad\x96\x6d\xad\x2d\xef\x55\x75\xcd\x78\x3f\x49\x75\xe4\x29\x39\xdb\xae\xfc\xb2\x2a\x28\xd5\xbe\xa4\x59\x4b\xcb\x37\x6b\x75\x19\x4b\x17\x8f\x2a\x32\xcb\x1a\x68\xf5\xde\x1d\x78\xee\x3f\xb3\x48\xdc\x9a\x8f\x71\x62\xe6\x15\x0e\xac\xaf\x79\x91\xcd\x4d\x13\xce\xa1\x2a\xd9\xb7\x5c\xe8\x6c\x8e\x55\x2f\xeb\xf2\x0c\xbb\x3a\x24\xc6\xa0\x4a\xb8\x34\x6e\x45\x7f\xd7\x29\x12\x5b\x91\xce\x3b\x9b\x3a\x54\x14\xa1\xe4\x52\xd9\x2d\xf3\x04\xdd\x3a\x04\x81\xfd\x32\x57\x08\x33\xc6\x39\x0c\x11\xcc\x4c\x02\x67\x02\x35\xcc\x98\x89\x80\xb2\xd1\x08\x95\x7d\xb2\xb3\x8d\x1a\xa4\xb0\x1b\xf2\x58\xcb\xb8\xe3\x94\x51\xec\x6c\x93\xea\xae\x03\x8b\x8c\xb3\x1d\x58\xd8\x86\xdc\x01\xb7\x8f\x9c\x18\x36\x45\xc8\x9a\xea\x80\x89\x10\x21\x6b\xaa\xe0\x69\x0c\xa5\xa2\xba\xe6\xd6\x21\x21\x94\x32\x31\xee\x40\xab\xbd\x2c\xad\x8e\x9a\xcb\x7a\xd5\xc3\x7c\xe3\xc1\xed\xe7\x1f\x91\x05\x74\x06\x27\xb6\xe0\xee\x03\xe8\x48\xce\x5e\x29\x46\xdf\xd9\x43\x77\xc0\xbd\x9b\xbb\x15\xea\x54\xcc\x13\x9e\x8e\x99\xd0\x1d\xf8\x5c\x05\xd9\x54\x97\x24\xcc\x2f\xac\xfc\x31\x1a\xcf\x35\x52\x72\xc3\x12\xb7\xe6\xd5\xca\x7b\xbe\x94\x29\xe9\x2b\xb4\xc3\xc0\xb5\xdc\x50\xea\x3e\x4b\x4b\x34\xdc\x90\xf4\xc0\x73\x8a\x06\xee\xd4\xfc\x90\xb3\xf0\xdb\xce\x47\x64\x9b\xe3\x6b\x71\x05\x74\x1d\x4f\x19\xdf\x46\x94\x7f\x4a\xbb\xfb\x3d\x64\x5d\x1f\x79\xde\xf4\x4d\xc4\xf4\x43\x2d\xd1\x1a\x6d\xb7\xfa\x92\x69\xf6\x1c\x58\x93\x11\x53\xda\x76\xde\xbd\xaf\xc2\x41\xe9\x05\xcb\xfb\xde\xee\xe8\x72\xdb\x2c\x2c\x3f\x51\x32\xf1\xdc\x02\xd1\xad\x83\x51\x29\x6e\x35\x8c\xf2\x72\x09\xc8\x35\xfe\xf5\x6e\x47\x84\xeb\xbd\x7e\xff\x64\xf5\x56\x60\xe5\x29\xa9\x1b\xe4\x13\x73\x37\xc8\xff\x3f\xf4\xff\x01\x00\x00\xff\xff\x73\x51\x5c\x05\x17\x15\x00\x00")

func assetsMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMainHtml,
		"assets/main.html",
	)
}

func assetsMainHtml() (*asset, error) {
	bytes, err := assetsMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/main.html", size: 5399, mode: os.FileMode(420), modTime: time.Unix(1483625648, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/main.html": assetsMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{assetsMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

